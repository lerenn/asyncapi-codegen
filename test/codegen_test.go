package test

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"testing"

	"github.com/lerenn/asyncapi-codegen/pkg/codegen"
	"github.com/lerenn/asyncapi-codegen/pkg/codegen/generators"
	"github.com/stretchr/testify/suite"
)

func TestCodegenSuite(t *testing.T) {
	suite.Run(t, new(CodegenSuite))
}

type CodegenSuite struct {
	suite.Suite
}

func (suite *CodegenSuite) TestParseGenerate() {
	cases := []struct {
		SpecificationPath string
		ExpectedCodePath  string
	}{
		{
			SpecificationPath: "./official/spec/examples/simple.yml",
			ExpectedCodePath:  "./official/expected/simple/simple.expected.go",
		},
	}

	outputFile := tmpName()
	// defer os.Remove(outputFile)

	for i, c := range cases {
		cg, err := codegen.FromFile(c.SpecificationPath)
		suite.Require().NoError(err, i)

		err = cg.Generate(codegen.Options{
			PackageName: "test",
			OutputPath:  outputFile,
			Generate: generators.Options{
				Application: true,
				Client:      true,
				Broker:      true,
				Types:       true,
			},
		})
		suite.Require().NoError(err, i)

		suite.Require().FileExists(outputFile)

		suite.compareFiles(c.ExpectedCodePath, outputFile, i)
	}
}

func tmpName() string {
	file, err := os.CreateTemp("", "codegen-test")
	if err != nil {
		panic(err)
	}
	defer os.Remove(file.Name())
	return file.Name()
}

func (suite *CodegenSuite) compareFiles(pathFile1, pathFile2 string, caseNb ...interface{}) {
	f1, err := os.Open(pathFile1)
	suite.Require().NoError(err, caseNb)
	defer f1.Close()

	f2, err := os.Open(pathFile2)
	suite.Require().NoError(err, caseNb)
	defer f2.Close()

	f1Scanner := bufio.NewScanner(f1)
	f1Scanner.Split(bufio.ScanLines)

	f2Scanner := bufio.NewScanner(f2)
	f2Scanner.Split(bufio.ScanLines)

	i := 0
	for f1Scanner.Scan() && f2Scanner.Scan() {
		if strings.HasPrefix(f1Scanner.Text(), "// Code generated by") {
			continue
		}

		suite.Require().Equal(
			f1Scanner.Text(),
			f2Scanner.Text(),
			fmt.Sprintf("Line %d (%d)", i, caseNb))
		i++
	}

	// Check that bother scanner are at the end
	suite.Require().False(f1Scanner.Scan())
	suite.Require().False(f2Scanner.Scan())
}
