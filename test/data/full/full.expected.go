// Package "asyncapi" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package asyncapi

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
)

// AppSubscriber represents all application handlers that are expecting messages from clients
type AppSubscriber interface {
	// UserDelete
	UserDelete(msg UserDeleteMessage)

	// UserModify
	UserModify(msg UserModifyExtraWordingMessage)
}

// AppController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the app
type AppController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
}

// NewAppController links the application to the broker
func NewAppController(bs BrokerController) *AppController {
	// TODO: Check that brokerController is not nil

	return &AppController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
	}
}

// Close will clean up any existing resources on the controller
func (ac *AppController) Close() {
	ac.UnsubscribeAll()

}

// SubscribeAll will subscribe to channels on which the app is expecting messages
func (ac *AppController) SubscribeAll(as AppSubscriber) error {
	// TODO: Check that as is not nil

	if err := ac.SubscribeUserDelete(as.UserDelete); err != nil {
		return err
	}
	if err := ac.SubscribeUserModify(as.UserModify); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (ac *AppController) UnsubscribeAll() {
	ac.UnsubscribeUserDelete()
	ac.UnsubscribeUserModify()
}

// SubscribeUserDelete will subscribe to new messages from 'user/delete' channel
func (ac *AppController) SubscribeUserDelete(fn func(msg UserDeleteMessage)) error {
	// TODO: check if there is already a subscription

	// Subscribe to broker channel
	msgs, stop, err := ac.brokerController.Subscribe("user/delete")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for um, open := <-msgs; open; um, open = <-msgs {
			var msg UserDeleteMessage
			if err := msg.fromUniversalMessage(um); err != nil {
				log.Printf("an error happened when receiving an event: %s (msg: %+v)\n", err, msg) // TODO: add proper error handling
				continue
			}

			fn(msg)
		}
	}()

	// Add the stop channel to the inside map
	ac.stopSubscribers["user/delete"] = stop

	return nil
}

// UnsubscribeUserDelete will unsubscribe messages from 'user/delete' channel
func (ac *AppController) UnsubscribeUserDelete() {
	stopChan, exists := ac.stopSubscribers["user/delete"]
	if !exists {
		return
	}

	stopChan <- true
	delete(ac.stopSubscribers, "user/delete")
} // SubscribeUserModify will subscribe to new messages from 'user/modify' channel
func (ac *AppController) SubscribeUserModify(fn func(msg UserModifyExtraWordingMessage)) error {
	// TODO: check if there is already a subscription

	// Subscribe to broker channel
	msgs, stop, err := ac.brokerController.Subscribe("user/modify")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for um, open := <-msgs; open; um, open = <-msgs {
			var msg UserModifyExtraWordingMessage
			if err := msg.fromUniversalMessage(um); err != nil {
				log.Printf("an error happened when receiving an event: %s (msg: %+v)\n", err, msg) // TODO: add proper error handling
				continue
			}

			fn(msg)
		}
	}()

	// Add the stop channel to the inside map
	ac.stopSubscribers["user/modify"] = stop

	return nil
}

// UnsubscribeUserModify will unsubscribe messages from 'user/modify' channel
func (ac *AppController) UnsubscribeUserModify() {
	stopChan, exists := ac.stopSubscribers["user/modify"]
	if !exists {
		return
	}

	stopChan <- true
	delete(ac.stopSubscribers, "user/modify")
}

// PublishUserSignedin will publish messages to 'user/signedin' channel
func (ac *AppController) PublishUserSignedin(msg UserSignedinMessage) error {
	// TODO: check that 'ac' is not nil

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return ac.brokerController.Publish("user/signedin", um)
}

// PublishUserSignedup will publish messages to 'user/signedup' channel
func (ac *AppController) PublishUserSignedup(msg UserSignedUpExtraWordingMessage) error {
	// TODO: check that 'ac' is not nil

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return ac.brokerController.Publish("user/signedup", um)
}

// Listen will let the controller handle subscriptions and will be interrupted
// only when an struct is sent on the interrupt channel
func (ac *AppController) Listen(irq chan interface{}) {
	<-irq
}

// ClientSubscriber represents all application handlers that are expecting messages from application
type ClientSubscriber interface {
	// UserSignedin
	UserSignedin(msg UserSignedinMessage)

	// UserSignedup
	UserSignedup(msg UserSignedUpExtraWordingMessage)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
}

// NewClientController links the client to the broker
func NewClientController(bs BrokerController) *ClientController {
	// TODO: Check that brokerController is not nil

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
	}
}

// Close will clean up any existing resources on the controller
func (cc *ClientController) Close() {
	cc.UnsubscribeAll()

}

// SubscribeAll will subscribe to channels on which the client is expecting messages
func (cc *ClientController) SubscribeAll(cs ClientSubscriber) error {
	// TODO: Check that cs is not nil

	if err := cc.SubscribeUserSignedin(cs.UserSignedin); err != nil {
		return err
	}
	if err := cc.SubscribeUserSignedup(cs.UserSignedup); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (cc *ClientController) UnsubscribeAll() {
	cc.UnsubscribeUserSignedin()
	cc.UnsubscribeUserSignedup()
}

// SubscribeUserSignedin will subscribe to new messages from 'user/signedin' channel
func (cc *ClientController) SubscribeUserSignedin(fn func(msg UserSignedinMessage)) error {
	// TODO: check if there is already a subscription

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("user/signedin")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to client subscriber
	go func() {
		for um, open := <-msgs; open; um, open = <-msgs {
			var msg UserSignedinMessage
			if err := msg.fromUniversalMessage(um); err != nil {
				log.Printf("an error happened when receiving an event: %s (msg: %+v)\n", err, msg) // TODO: add proper error handling
				continue
			}

			fn(msg)
		}
	}()

	// Add the stop channel to the inside map
	cc.stopSubscribers["user/signedin"] = stop

	return nil
}

// UnsubscribeUserSignedin will unsubscribe messages from 'user/signedin' channel
func (cc *ClientController) UnsubscribeUserSignedin() {
	stopChan, exists := cc.stopSubscribers["user/signedin"]
	if !exists {
		return
	}

	stopChan <- true
	delete(cc.stopSubscribers, "user/signedin")
}

// SubscribeUserSignedup will subscribe to new messages from 'user/signedup' channel
func (cc *ClientController) SubscribeUserSignedup(fn func(msg UserSignedUpExtraWordingMessage)) error {
	// TODO: check if there is already a subscription

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("user/signedup")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to client subscriber
	go func() {
		for um, open := <-msgs; open; um, open = <-msgs {
			var msg UserSignedUpExtraWordingMessage
			if err := msg.fromUniversalMessage(um); err != nil {
				log.Printf("an error happened when receiving an event: %s (msg: %+v)\n", err, msg) // TODO: add proper error handling
				continue
			}

			fn(msg)
		}
	}()

	// Add the stop channel to the inside map
	cc.stopSubscribers["user/signedup"] = stop

	return nil
}

// UnsubscribeUserSignedup will unsubscribe messages from 'user/signedup' channel
func (cc *ClientController) UnsubscribeUserSignedup() {
	stopChan, exists := cc.stopSubscribers["user/signedup"]
	if !exists {
		return
	}

	stopChan <- true
	delete(cc.stopSubscribers, "user/signedup")
}

// PublishUserDelete will publish messages to 'user/delete' channel
func (cc *ClientController) PublishUserDelete(msg UserDeleteMessage) error {
	// TODO: check that 'cc' is not nil

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return cc.brokerController.Publish("user/delete", um)
}

// PublishUserModify will publish messages to 'user/modify' channel
func (cc *ClientController) PublishUserModify(msg UserModifyExtraWordingMessage) error {
	// TODO: check that 'cc' is not nil

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return cc.brokerController.Publish("user/modify", um)
}

// Listen will let the controller handle subscriptions and will be interrupted
// only when an struct is sent on the interrupt channel
func (cc *ClientController) Listen(irq chan interface{}) {
	<-irq
}

// WaitForUserSignedup will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForUserSignedup(correlationID string, pub func() error, timeout time.Duration) (UserSignedUpExtraWordingMessage, error) {
	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("user/signedup")
	if err != nil {
		return UserSignedUpExtraWordingMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return UserSignedUpExtraWordingMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um := <-msgs:
			var msg UserSignedUpExtraWordingMessage
			msg.fromUniversalMessage(um)

			if correlationID == msg.Headers.CorrelationID {
				return msg, nil
			}
		case <-time.After(timeout): // TODO: make it consumable between two call
			return UserSignedUpExtraWordingMessage{}, ErrTimedOut
		}
	}
}

const (
	// CorrelationIDField is the name of the field that will contain the correlation ID
	CorrelationIDField = "correlation_id"
)

// UniversalMessage is a wrapper that will contain all information regarding a message
type UniversalMessage struct {
	CorrelationID string
	Payload       []byte
}

// BrokerController represents the functions that should be implemented to connect
// the broker to the application or the client
type BrokerController interface {
	// Publish a message to the broker
	Publish(channel string, mw UniversalMessage) error

	// Subscribe to messages from the broker
	Subscribe(channel string) (msgs chan UniversalMessage, stop chan interface{}, err error)
}

var (
	// Generic error for AsyncAPI generated code
	ErrAsyncAPI = errors.New("error when using AsyncAPI")

	// ErrTimedOut is given when any timeout happen
	ErrTimedOut = fmt.Errorf("%w: time out", ErrAsyncAPI)
)

// UserDeleteMessage is the message expected for 'UserDelete' channel
type UserDeleteMessage struct {
	// Payload will be inserted in the message payload
	Payload int64
}

// fromUniversalMessage will fill UserDeleteMessage with data from UniversalMessage
func (msg *UserDeleteMessage) fromUniversalMessage(um UniversalMessage) error {
	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return err
	}

	// TODO: run checks on msg type

	return nil
}

// toUniversalMessage will generate an UniversalMessage from UserDeleteMessage data
func (msg UserDeleteMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	return UniversalMessage{
		Payload: payload,
	}, nil
}

// UserSignedinMessage is the message expected for 'UserSignedin' channel
type UserSignedinMessage struct {
	// Payload will be inserted in the message payload
	Payload int64
}

// fromUniversalMessage will fill UserSignedinMessage with data from UniversalMessage
func (msg *UserSignedinMessage) fromUniversalMessage(um UniversalMessage) error {
	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return err
	}

	// TODO: run checks on msg type

	return nil
}

// toUniversalMessage will generate an UniversalMessage from UserSignedinMessage data
func (msg UserSignedinMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	return UniversalMessage{
		Payload: payload,
	}, nil
}

// UserModifyExtraWordingMessage is the message expected for 'UserModifyExtraWording' channel
type UserModifyExtraWordingMessage struct {
	// Payload will be inserted in the message payload
	Payload struct {
		// Name
		Name string `json:"name"`
	}
}

// fromUniversalMessage will fill UserModifyExtraWordingMessage with data from UniversalMessage
func (msg *UserModifyExtraWordingMessage) fromUniversalMessage(um UniversalMessage) error {
	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return err
	}

	// TODO: run checks on msg type

	return nil
}

// toUniversalMessage will generate an UniversalMessage from UserModifyExtraWordingMessage data
func (msg UserModifyExtraWordingMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	return UniversalMessage{
		Payload: payload,
	}, nil
}

// UserSignedUpExtraWordingMessage is the message expected for 'UserSignedUpExtraWording' channel
type UserSignedUpExtraWordingMessage struct {
	// Headers will be used to fill the message headers
	Headers struct {
		// CorrelationID
		CorrelationID string `json:"correlation_id"`
	}

	// Payload will be inserted in the message payload
	Payload struct {
		// Name of the user
		DisplayName string `json:"display_name"`

		// Email of the user
		Email string `json:"email"`

		// Schema
		Schema SchemaStruct `json:"schema"`
	}
}

// fromUniversalMessage will fill UserSignedUpExtraWordingMessage with data from UniversalMessage
func (msg *UserSignedUpExtraWordingMessage) fromUniversalMessage(um UniversalMessage) error {
	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return err
	}

	// Get correlation ID
	msg.Headers.CorrelationID = um.CorrelationID

	// TODO: run checks on msg type

	return nil
}

// toUniversalMessage will generate an UniversalMessage from UserSignedUpExtraWordingMessage data
func (msg UserSignedUpExtraWordingMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	// Set correlation ID if it does not exist
	var correlationID string
	if msg.Headers.CorrelationID != "" {
		correlationID = msg.Headers.CorrelationID
	} else {
		correlationID = uuid.New().String()
	}

	return UniversalMessage{
		Payload:       payload,
		CorrelationID: correlationID,
	}, nil
}

// UserSignedUpExtraWording is a component of the AsyncAPI specification required in messages
type UserSignedUpExtraWording string

// Limit is a component of the AsyncAPI specification required in messages
type Limit int32

// Number is a component of the AsyncAPI specification required in messages
type Number float64

// Number32 is a component of the AsyncAPI specification required in messages
type Number32 float32

// Number64 is a component of the AsyncAPI specification required in messages
type Number64 float64

// SchemaStruct is a component of the AsyncAPI specification required in messages
type SchemaStruct string

// Total is a component of the AsyncAPI specification required in messages
type Total int64
