// Package "issue135" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package issue135

import (
	"fmt"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"
)

// AsyncAPIVersion is the version of the used AsyncAPI document
const AsyncAPIVersion = "1.2.3"

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
	// broker is the broker controller that will be used to communicate
	broker extensions.BrokerController
	// subscriptions is a map of all subscriptions
	subscriptions map[string]extensions.BrokerChannelSubscription
	// logger is the logger that will be usedÂ² to log operations on controller
	logger extensions.Logger
	// middlewares are the middlewares that will be executed when sending or
	// receiving messages
	middlewares []extensions.Middleware
	// handler to handle errors from consumers and middlewares
	errorHandler extensions.ErrorHandler
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
	return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
	return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

// WithErrorHandler attaches a errorhandler to handle errors from subscriber functions
func WithErrorHandler(handler extensions.ErrorHandler) ControllerOption {
	return func(controller *controller) {
		controller.errorHandler = handler
	}
}

type MessageWithCorrelationID interface {
	CorrelationID() string
	SetCorrelationID(id string)
}

type Error struct {
	Channel string
	Err     error
}

func (e *Error) Error() string {
	return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

// GroupMessage is the message expected for 'Group' channel
type GroupMessage struct {
	// Payload will be inserted in the message payload
	Payload string
}

func NewGroupMessage() GroupMessage {
	var msg GroupMessage

	return msg
}

// newGroupMessageFromBrokerMessage will fill a new GroupMessage with data from generic broker message
func newGroupMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (GroupMessage, error) {
	var msg GroupMessage

	// Convert to string
	payload := string(bMsg.Payload)
	msg.Payload = payload // No need for type conversion to reference

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from GroupMessage data
func (msg GroupMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Convert to []byte
	payload := []byte(msg.Payload)

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// InfoMessage is the message expected for 'Info' channel
type InfoMessage struct {
	// Payload will be inserted in the message payload
	Payload string
}

func NewInfoMessage() InfoMessage {
	var msg InfoMessage

	return msg
}

// newInfoMessageFromBrokerMessage will fill a new InfoMessage with data from generic broker message
func newInfoMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (InfoMessage, error) {
	var msg InfoMessage

	// Convert to string
	payload := string(bMsg.Payload)
	msg.Payload = payload // No need for type conversion to reference

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from InfoMessage data
func (msg InfoMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Convert to []byte
	payload := []byte(msg.Payload)

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// ProjectMessage is the message expected for 'Project' channel
type ProjectMessage struct {
	// Payload will be inserted in the message payload
	Payload string
}

func NewProjectMessage() ProjectMessage {
	var msg ProjectMessage

	return msg
}

// newProjectMessageFromBrokerMessage will fill a new ProjectMessage with data from generic broker message
func newProjectMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (ProjectMessage, error) {
	var msg ProjectMessage

	// Convert to string
	payload := string(bMsg.Payload)
	msg.Payload = payload // No need for type conversion to reference

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from ProjectMessage data
func (msg ProjectMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Convert to []byte
	payload := []byte(msg.Payload)

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// ResourceMessage is the message expected for 'Resource' channel
type ResourceMessage struct {
	// Payload will be inserted in the message payload
	Payload string
}

func NewResourceMessage() ResourceMessage {
	var msg ResourceMessage

	return msg
}

// newResourceMessageFromBrokerMessage will fill a new ResourceMessage with data from generic broker message
func newResourceMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (ResourceMessage, error) {
	var msg ResourceMessage

	// Convert to string
	payload := string(bMsg.Payload)
	msg.Payload = payload // No need for type conversion to reference

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from ResourceMessage data
func (msg ResourceMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Convert to []byte
	payload := []byte(msg.Payload)

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// StatusMessage is the message expected for 'Status' channel
type StatusMessage struct {
	// Payload will be inserted in the message payload
	Payload string
}

func NewStatusMessage() StatusMessage {
	var msg StatusMessage

	return msg
}

// newStatusMessageFromBrokerMessage will fill a new StatusMessage with data from generic broker message
func newStatusMessageFromBrokerMessage(bMsg extensions.BrokerMessage) (StatusMessage, error) {
	var msg StatusMessage

	// Convert to string
	payload := string(bMsg.Payload)
	msg.Payload = payload // No need for type conversion to reference

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from StatusMessage data
func (msg StatusMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Convert to []byte
	payload := []byte(msg.Payload)

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

const (
	// GroupPath is the constant representing the 'Group' channel path.
	GroupPath = "group"
	// InfoPath is the constant representing the 'Info' channel path.
	InfoPath = "info"
	// ProjectPath is the constant representing the 'Project' channel path.
	ProjectPath = "project"
	// ResourcePath is the constant representing the 'Resource' channel path.
	ResourcePath = "resource"
	// StatusPath is the constant representing the 'Status' channel path.
	StatusPath = "status"
)

// ChannelsPaths is an array of all channels paths
var ChannelsPaths = []string{
	GroupPath,
	InfoPath,
	ProjectPath,
	ResourcePath,
	StatusPath,
}
