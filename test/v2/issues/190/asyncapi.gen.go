// Package "issue190" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package issue190

import (
	"encoding/json"
	"fmt"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"
)

// AsyncAPIVersion is the version of the used AsyncAPI document
const AsyncAPIVersion = "1.0.0"

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
	// broker is the broker controller that will be used to communicate
	broker extensions.BrokerController
	// subscriptions is a map of all subscriptions
	subscriptions map[string]extensions.BrokerChannelSubscription
	// logger is the logger that will be usedÂ² to log operations on controller
	logger extensions.Logger
	// middlewares are the middlewares that will be executed when sending or
	// receiving messages
	middlewares []extensions.Middleware
	// handler to handle errors from consumers and middlewares
	errorHandler extensions.ErrorHandler
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
	return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
	return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

// WithErrorHandler attaches a errorhandler to handle errors from subscriber functions
func WithErrorHandler(handler extensions.ErrorHandler) ControllerOption {
	return func(controller *controller) {
		controller.errorHandler = handler
	}
}

type MessageWithCorrelationID interface {
	CorrelationID() string
	SetCorrelationID(id string)
}

type Error struct {
	Channel string
	Err     error
}

func (e *Error) Error() string {
	return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

// V2Issue190Msg1MessagePayload is a schema from the AsyncAPI specification required in messages
type V2Issue190Msg1MessagePayload struct {
	Data *V2Issue190Msg1MessagePayloadData `json:"data"`
}

// V2Issue190Msg1MessagePayloadData is a schema from the AsyncAPI specification required in messages
type V2Issue190Msg1MessagePayloadData struct {
	Hello *string `json:"hello"`
	Id    *string `json:"id"`
}

// V2Issue190Msg1Message is the message expected for 'V2Issue190Msg1Message' channel.
type V2Issue190Msg1Message struct {
	// Payload will be inserted in the message payload
	Payload V2Issue190Msg1MessagePayload
}

func NewV2Issue190Msg1Message() V2Issue190Msg1Message {
	var msg V2Issue190Msg1Message

	return msg
}

// brokerMessageToV2Issue190Msg1Message will fill a new V2Issue190Msg1Message with data from generic broker message
func brokerMessageToV2Issue190Msg1Message(bMsg extensions.BrokerMessage) (V2Issue190Msg1Message, error) {
	var msg V2Issue190Msg1Message

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from V2Issue190Msg1Message data
func (msg V2Issue190Msg1Message) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// V2Issue190Msg2MessagePayload is a schema from the AsyncAPI specification required in messages
type V2Issue190Msg2MessagePayload struct {
	Data *V2Issue190Msg2MessagePayloadData `json:"data"`
}

// V2Issue190Msg2MessagePayloadData is a schema from the AsyncAPI specification required in messages
type V2Issue190Msg2MessagePayloadData struct {
	Bar *string `json:"bar"`
	Id  *string `json:"id"`
}

// V2Issue190Msg2Message is the message expected for 'V2Issue190Msg2Message' channel.
type V2Issue190Msg2Message struct {
	// Payload will be inserted in the message payload
	Payload V2Issue190Msg2MessagePayload
}

func NewV2Issue190Msg2Message() V2Issue190Msg2Message {
	var msg V2Issue190Msg2Message

	return msg
}

// brokerMessageToV2Issue190Msg2Message will fill a new V2Issue190Msg2Message with data from generic broker message
func brokerMessageToV2Issue190Msg2Message(bMsg extensions.BrokerMessage) (V2Issue190Msg2Message, error) {
	var msg V2Issue190Msg2Message

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from V2Issue190Msg2Message data
func (msg V2Issue190Msg2Message) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// There is no headers here
	headers := make(map[string][]byte, 0)

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

const (
	// V2Issue190Msg1Path is the constant representing the 'V2Issue190Msg1' channel path.
	V2Issue190Msg1Path = "v2.issue190.msg1"
	// V2Issue190Msg2Path is the constant representing the 'V2Issue190Msg2' channel path.
	V2Issue190Msg2Path = "v2.issue190.msg2"
)

// ChannelsPaths is an array of all channels paths
var ChannelsPaths = []string{
	V2Issue190Msg1Path,
	V2Issue190Msg2Path,
}
