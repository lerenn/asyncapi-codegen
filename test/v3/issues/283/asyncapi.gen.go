// Package "issue283" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package issue283

import (
	"encoding/json"
	"fmt"
	"time"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"
)

// AsyncAPIVersion is the version of the used AsyncAPI document
const AsyncAPIVersion = "1.0.0"

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
	// broker is the broker controller that will be used to communicate
	broker extensions.BrokerController
	// subscriptions is a map of all subscriptions
	subscriptions map[string]extensions.BrokerChannelSubscription
	// logger is the logger that will be usedÂ² to log operations on controller
	logger extensions.Logger
	// middlewares are the middlewares that will be executed when sending or
	// receiving messages
	middlewares []extensions.Middleware
	// handler to handle errors from consumers and middlewares
	errorHandler extensions.ErrorHandler
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
	return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
	return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

// WithErrorHandler attaches a errorhandler to handle errors from subscriber functions
func WithErrorHandler(handler extensions.ErrorHandler) ControllerOption {
	return func(controller *controller) {
		controller.errorHandler = handler
	}
}

type MessageWithCorrelationID interface {
	CorrelationID() string
	SetCorrelationID(id string)
}

type Error struct {
	Channel string
	Err     error
}

func (e *Error) Error() string {
	return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

// Message 'TestMessageMessageFromChannel1Channel' reference another one at '#/components/messages/TestMessage'.
// This should be fixed in a future version to allow message override.
// If you encounter this message, feel free to open an issue on this subject
// to let know that you need this functionnality.

// Message 'TestMessageMessageFromChannel2Channel' reference another one at '#/components/messages/TestMessage2'.
// This should be fixed in a future version to allow message override.
// If you encounter this message, feel free to open an issue on this subject
// to let know that you need this functionnality.

// TestMessageMessage is the message expected for 'TestMessageMessage' channel.
type TestMessageMessage struct {
	// Headers will be used to fill the message headers
	Headers TestHeadersSchema

	// Payload will be inserted in the message payload
	Payload TestSchema
}

func NewTestMessageMessage() TestMessageMessage {
	var msg TestMessageMessage

	return msg
}

// brokerMessageToTestMessageMessage will fill a new TestMessageMessage with data from generic broker message
func brokerMessageToTestMessageMessage(bMsg extensions.BrokerMessage) (TestMessageMessage, error) {
	var msg TestMessageMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationId header
			h := string(v)
			msg.Headers.CorrelationId = &h
		case k == "timestamp": // Retrieving Timestamp header
			t, err := time.Parse(time.RFC3339, string(v))
			if err != nil {
				return msg, err
			}
			msg.Headers.Timestamp = &t
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from TestMessageMessage data
func (msg TestMessageMessage) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 2)

	// Adding CorrelationId header
	if msg.Headers.CorrelationId != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationId)
	}

	// Adding Timestamp header
	if msg.Headers.Timestamp != nil {
		headers["timestamp"] = []byte(msg.Headers.Timestamp.Format(time.RFC3339))
	}

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// TestMessage2Message is the message expected for 'TestMessage2Message' channel.
type TestMessage2Message struct {
	// Headers will be used to fill the message headers
	Headers TestHeadersSchema

	// Payload will be inserted in the message payload
	Payload TestSchema
}

func NewTestMessage2Message() TestMessage2Message {
	var msg TestMessage2Message

	return msg
}

// brokerMessageToTestMessage2Message will fill a new TestMessage2Message with data from generic broker message
func brokerMessageToTestMessage2Message(bMsg extensions.BrokerMessage) (TestMessage2Message, error) {
	var msg TestMessage2Message

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(bMsg.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// Get each headers from broker message
	for k, v := range bMsg.Headers {
		switch {
		case k == "correlationId": // Retrieving CorrelationId header
			h := string(v)
			msg.Headers.CorrelationId = &h
		case k == "timestamp": // Retrieving Timestamp header
			t, err := time.Parse(time.RFC3339, string(v))
			if err != nil {
				return msg, err
			}
			msg.Headers.Timestamp = &t
		default:
			// TODO: log unknown error
		}
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toBrokerMessage will generate a generic broker message from TestMessage2Message data
func (msg TestMessage2Message) toBrokerMessage() (extensions.BrokerMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return extensions.BrokerMessage{}, err
	}

	// Add each headers to broker message
	headers := make(map[string][]byte, 2)

	// Adding CorrelationId header
	if msg.Headers.CorrelationId != nil {
		headers["correlationId"] = []byte(*msg.Headers.CorrelationId)
	}

	// Adding Timestamp header
	if msg.Headers.Timestamp != nil {
		headers["timestamp"] = []byte(msg.Headers.Timestamp.Format(time.RFC3339))
	}

	return extensions.BrokerMessage{
		Headers: headers,
		Payload: payload,
	}, nil
}

// TestSchema is a schema from the AsyncAPI specification required in messages
type TestSchema struct {
	// Description: Something in the payload
	TestProp string `json:"testProp"`
}

// TestHeadersSchema is a schema from the AsyncAPI specification required in messages
type TestHeadersSchema struct {
	// Description: Correlation ID for tracing (traceId in OpenTelemetry)
	CorrelationId *string    `json:"correlationId,omitempty"`
	Timestamp     *time.Time `json:"timestamp,omitempty"`
}

const (
	// Channel1ChannelPath is the constant representing the 'Channel1Channel' channel path.
	Channel1ChannelPath = "v3.omitempty.test"
	// Channel2ChannelPath is the constant representing the 'Channel2Channel' channel path.
	Channel2ChannelPath = "v3.omitempty.test"
)

// ChannelsPaths is an array of all channels paths
var ChannelsPaths = []string{
	Channel1ChannelPath,
	Channel2ChannelPath,
}
