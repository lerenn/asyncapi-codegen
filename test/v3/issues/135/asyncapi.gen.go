// Package "issue135" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package issue135

import (
	"fmt"

	"github.com/lerenn/asyncapi-codegen/pkg/extensions"
)

// AsyncAPIVersion is the version of the used AsyncAPI document
const AsyncAPIVersion = "1.2.3"

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
	// broker is the broker controller that will be used to communicate
	broker extensions.BrokerController
	// subscriptions is a map of all subscriptions
	subscriptions map[string]extensions.BrokerChannelSubscription
	// logger is the logger that will be usedÂ² to log operations on controller
	logger extensions.Logger
	// middlewares are the middlewares that will be executed when sending or
	// receiving messages
	middlewares []extensions.Middleware
	// handler to handle errors from consumers and middlewares
	errorHandler extensions.ErrorHandler
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
	return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
	return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

// WithErrorHandler attaches a errorhandler to handle errors from subscriber functions
func WithErrorHandler(handler extensions.ErrorHandler) ControllerOption {
	return func(controller *controller) {
		controller.errorHandler = handler
	}
}

type MessageWithCorrelationID interface {
	CorrelationID() string
	SetCorrelationID(id string)
}

type Error struct {
	Channel string
	Err     error
}

func (e *Error) Error() string {
	return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

const (
	// GroupChannelPath is the constant representing the 'GroupChannel' channel path.
	GroupChannelPath = "group"
	// InfoChannelPath is the constant representing the 'InfoChannel' channel path.
	InfoChannelPath = "info"
	// ProjectChannelPath is the constant representing the 'ProjectChannel' channel path.
	ProjectChannelPath = "project"
	// ResourceChannelPath is the constant representing the 'ResourceChannel' channel path.
	ResourceChannelPath = "resource"
	// StatusChannelPath is the constant representing the 'StatusChannel' channel path.
	StatusChannelPath = "status"
)

// ChannelsPaths is an array of all channels paths
var ChannelsPaths = []string{
	GroupChannelPath,
	InfoChannelPath,
	ProjectChannelPath,
	ResourceChannelPath,
	StatusChannelPath,
}
