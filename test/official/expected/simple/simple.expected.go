// Package "test" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package test

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
)

// AppController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the app
type AppController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
}

// NewAppController links the application to the broker
func NewAppController(bs BrokerController) *AppController {
	// TODO: Check that brokerController is not nil

	return &AppController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
	}
}

// Close will clean up any existing resources on the controller
func (ac *AppController) Close() {
	// Nothing to do
}

// PublishUserSignedup will publish messages to 'user/signedup' channel
func (ac *AppController) PublishUserSignedup(msg UserSignedUpMessage) error {
	// TODO: check that 'ac' is not nil

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return ac.brokerController.Publish("user/signedup", um)
}

// Listen will let the controller handle subscriptions and will be interrupted
// only when an struct is sent on the interrupt channel
func (ac *AppController) Listen(irq chan interface{}) {
	<-irq
}

// ClientSubscriber represents all application handlers that are expecting messages from application
type ClientSubscriber interface {
	// UserSignedup
	UserSignedup(msg UserSignedUpMessage)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
}

// NewClientController links the client to the broker
func NewClientController(bs BrokerController) *ClientController {
	// TODO: Check that brokerController is not nil

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
	}
}

// Close will clean up any existing resources on the controller
func (cc *ClientController) Close() {
	cc.UnsubscribeAll()

}

// SubscribeAll will subscribe to channels on which the client is expecting messages
func (cc *ClientController) SubscribeAll(cs ClientSubscriber) error {
	// TODO: Check that cs is not nil

	if err := cc.SubscribeUserSignedup(cs.UserSignedup); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (cc *ClientController) UnsubscribeAll() {
	cc.UnsubscribeUserSignedup()
}

// SubscribeUserSignedup will subscribe to new messages from 'user/signedup' channel
func (cc *ClientController) SubscribeUserSignedup(fn func(msg UserSignedUpMessage)) error {
	// TODO: check if there is already a subscription

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("user/signedup")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to client subscriber
	go func() {
		for um, open := <-msgs; open; um, open = <-msgs {
			msg, err := newUserSignedUpMessageFromUniversalMessage(um)
			if err != nil {
				log.Printf("an error happened when receiving an event: %s (msg: %+v)\n", err, msg) // TODO: add proper error handling
				continue
			}

			fn(msg)
		}
	}()

	// Add the stop channel to the inside map
	cc.stopSubscribers["user/signedup"] = stop

	return nil
}

// UnsubscribeUserSignedup will unsubscribe messages from 'user/signedup' channel
func (cc *ClientController) UnsubscribeUserSignedup() {
	stopChan, exists := cc.stopSubscribers["user/signedup"]
	if !exists {
		return
	}

	stopChan <- true
	delete(cc.stopSubscribers, "user/signedup")
}

// Listen will let the controller handle subscriptions and will be interrupted
// only when an struct is sent on the interrupt channel
func (cc *ClientController) Listen(irq chan interface{}) {
	<-irq
}

const (
	// CorrelationIDField is the name of the field that will contain the correlation ID
	CorrelationIDField = "correlation_id"
)

// UniversalMessage is a wrapper that will contain all information regarding a message
type UniversalMessage struct {
	CorrelationID string
	Payload       []byte
}

// BrokerController represents the functions that should be implemented to connect
// the broker to the application or the client
type BrokerController interface {
	// Publish a message to the broker
	Publish(channel string, mw UniversalMessage) error

	// Subscribe to messages from the broker
	Subscribe(channel string) (msgs chan UniversalMessage, stop chan interface{}, err error)
}

var (
	// Generic error for AsyncAPI generated code
	ErrAsyncAPI = errors.New("error when using AsyncAPI")

	// ErrTimedOut is given when any timeout happen
	ErrTimedOut = fmt.Errorf("%w: time out", ErrAsyncAPI)
)

// UserSignedUpMessage is the message expected for 'UserSignedUp' channel
type UserSignedUpMessage struct {
	// Payload will be inserted in the message payload
	Payload struct {
		// Name of the user
		DisplayName string `json:"display_name"`

		// Email of the user
		Email string `json:"email"`
	}
}

func NewUserSignedUpMessage() UserSignedUpMessage {
	var msg UserSignedUpMessage

	return msg
}

// newUserSignedUpMessageFromUniversalMessage will fill a new UserSignedUpMessage with data from UniversalMessage
func newUserSignedUpMessageFromUniversalMessage(um UniversalMessage) (UserSignedUpMessage, error) {
	var msg UserSignedUpMessage

	// Unmarshal payload to expected message payload format
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return msg, err
	}

	// TODO: run checks on msg type

	return msg, nil
}

// toUniversalMessage will generate an UniversalMessage from UserSignedUpMessage data
func (msg UserSignedUpMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Marshal payload to JSON
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	return UniversalMessage{
		Payload: payload,
	}, nil
}
