// Package "generated" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package generated

import (
	"context"

	aapiContext "github.com/lerenn/asyncapi-codegen/pkg/context"
	"github.com/lerenn/asyncapi-codegen/pkg/log"
	"github.com/lerenn/asyncapi-codegen/pkg/middleware"
)

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the Client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	logger           log.Interface
	middlewares      []middleware.Interface
}

// NewClientController links the Client to the broker
func NewClientController(bs BrokerController) (*ClientController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
		logger:           log.Silent{},
		middlewares:      make([]middleware.Interface, 0),
	}, nil
}

// SetLogger attaches a logger that will log operations on controller
func (c *ClientController) SetLogger(logger log.Interface) {
	c.logger = logger
	c.brokerController.SetLogger(logger)
}

// AddMiddlewares attaches middlewares that will be executed when sending or
// receiving messages
func (c *ClientController) AddMiddlewares(middleware ...middleware.Interface) {
	c.middlewares = append(c.middlewares, middleware...)
}

func (c ClientController) executeMiddlewares(ctx context.Context, um UniversalMessage) {
	for _, m := range c.middlewares {
		ctx = m(ctx, um.Payload)
	}
}

func addClientContextValues(ctx context.Context, path, operation string) context.Context {
	ctx = context.WithValue(ctx, aapiContext.KeyIsModule, "asyncapi")
	ctx = context.WithValue(ctx, aapiContext.KeyIsProvider, "client")
	ctx = context.WithValue(ctx, aapiContext.KeyIsChannel, path)
	return context.WithValue(ctx, aapiContext.KeyIsOperation, operation)
}

// Close will clean up any existing resources on the controller
func (c *ClientController) Close(ctx context.Context) {
	// Unsubscribing remaining channels
}

// PublishHello will publish messages to 'hello' channel
func (c *ClientController) PublishHello(ctx context.Context, msg HelloMessage) error {
	// Get channel path
	path := "hello"

	// Set context
	ctx = addClientContextValues(ctx, path, "publish")
	ctx = context.WithValue(ctx, aapiContext.KeyIsMessage, msg)
	ctx = context.WithValue(ctx, aapiContext.KeyIsDirection, "publication")

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Execute middlewares
	c.executeMiddlewares(ctx, um)

	// Publish on event broker
	c.logger.Info(ctx, "Publishing to channel")

	return c.brokerController.Publish(ctx, path, um)
}
