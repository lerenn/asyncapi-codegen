// Package "generated" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package generated

import (
	"fmt"
	"time"
)

// ClientSubscriber represents all handlers that are expecting messages for Client
type ClientSubscriber interface {
	// Pong
	Pong(msg PongMessage)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the Client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
	errChan          chan Error
}

// NewClientController links the Client to the broker
func NewClientController(bs BrokerController) (*ClientController, error) {
	if bs == nil {
		return nil, ErrNilBrokerController
	}

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
		errChan:          make(chan Error, 256),
	}, nil
}

// Errors will give back the channel that contains errors and that you can listen to handle errors
// Please take a look at Error struct form information on error
func (c ClientController) Errors() <-chan Error {
	return c.errChan
}

// Close will clean up any existing resources on the controller
func (c *ClientController) Close() {
	c.UnsubscribeAll()
	close(c.errChan)
}

// SubscribeAll will subscribe to channels on which the app is expecting messages
func (c *ClientController) SubscribeAll(as ClientSubscriber) error {
	if as == nil {
		return ErrNilClientSubscriber
	}

	if err := c.SubscribePong(as.Pong); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *ClientController) UnsubscribeAll() {
	c.UnsubscribePong()
}

// SubscribePong will subscribe to new messages from 'pong' channel
func (c *ClientController) SubscribePong(fn func(msg PongMessage)) error {
	// Check if there is already a subscription
	_, exists := c.stopSubscribers["pong"]
	if exists {
		return fmt.Errorf("%w: pong channel is already subscribed", ErrAlreadySubscribedChannel)
	}

	// Subscribe to broker channel
	msgs, stop, err := c.brokerController.Subscribe("pong")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to app subscriber
	go func() {
		for um, open := <-msgs; open; um, open = <-msgs {
			msg, err := newPongMessageFromUniversalMessage(um)
			if err != nil {
				c.errChan <- Error{
					Channel: "pong",
					Err:     err,
				}
			} else {
				fn(msg)
			}
		}
	}()

	// Add the stop channel to the inside map
	c.stopSubscribers["pong"] = stop

	return nil
}

// UnsubscribePong will unsubscribe messages from 'pong' channel
func (c *ClientController) UnsubscribePong() {
	stopChan, exists := c.stopSubscribers["pong"]
	if !exists {
		return
	}

	stopChan <- true
	delete(c.stopSubscribers, "pong")
}

// PublishPing will publish messages to 'ping' channel
func (c *ClientController) PublishPing(msg PingMessage) error {
	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return c.brokerController.Publish("ping", um)
}

// Listen will let the controller handle subscriptions and will be interrupted
// only when an struct is sent on the interrupt channel
func (c *ClientController) Listen(irq <-chan interface{}) {
	<-irq
}

// WaitForPong will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
func (cc *ClientController) WaitForPong(msg MessageWithCorrelationID, pub func() error, timeout time.Duration) (PongMessage, error) {
	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("pong")
	if err != nil {
		return PongMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	// Execute publication
	if err := pub(); err != nil {
		return PongMessage{}, err
	}

	// Wait for corresponding response
	for {
		select {
		case um := <-msgs:
			msg, err := newPongMessageFromUniversalMessage(um)
			if err != nil {
				cc.errChan <- Error{
					Channel: "pong",
					Err:     err,
				}
				continue
			}

			if msg.Headers.CorrelationID != nil && msg.CorrelationID() == *msg.Headers.CorrelationID {
				return msg, nil
			}
		case <-time.After(timeout): // TODO: make it consumable between two call
			return PongMessage{}, ErrTimedOut
		}
	}
}
