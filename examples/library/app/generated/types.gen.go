// Package "generated" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package generated

import (
	"encoding/json"
	"errors"

	"github.com/google/uuid"
)

var (
	// ErrTimedOut is given when any timeout happen
	ErrTimedOut = errors.New("time out")
)

// BooksListRequest
type BooksListRequestMessage struct {
	// Headers will be used to fill the message headers
	Headers struct {
		// Correlation ID set by client
		CorrelationID string `json:"correlation_id"`
	}

	// Payload will be inserted in the message payload
	Payload struct {
		// Genre
		Genre string `json:"genre"`
	}
}

// fromUniversalMessage will fill BooksListRequestMessage with data from UniversalMessage
func (msg *BooksListRequestMessage) fromUniversalMessage(um UniversalMessage) error {
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return err
	}

	// TODO: run checks on msg type

	return nil
}

// toUniversalMessage will generate an UniversalMessage from BooksListRequestMessage data
func (msg BooksListRequestMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Convert to JSON payload
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	// Create a new correlationID if none is specified
	correlationID := uuid.New().String()
	// TODO: get if from another place according to spec
	if msg.Headers.CorrelationID != "" {
		correlationID = msg.Headers.CorrelationID
	}

	// Create universal message
	return UniversalMessage{
		Payload:       payload,
		CorrelationID: correlationID,
	}, nil
}

// BooksListResponse
type BooksListResponseMessage struct {
	// Headers will be used to fill the message headers
	Headers struct {
		// Correlation ID set by client on corresponding request
		CorrelationID string `json:"correlation_id"`
	}

	// Payload will be inserted in the message payload
	Payload struct {
		// Books list
		Books []Book `json:"books"`
	}
}

// fromUniversalMessage will fill BooksListResponseMessage with data from UniversalMessage
func (msg *BooksListResponseMessage) fromUniversalMessage(um UniversalMessage) error {
	err := json.Unmarshal(um.Payload, &msg.Payload)
	if err != nil {
		return err
	}

	// TODO: run checks on msg type

	return nil
}

// toUniversalMessage will generate an UniversalMessage from BooksListResponseMessage data
func (msg BooksListResponseMessage) toUniversalMessage() (UniversalMessage, error) {
	// TODO: implement checks on message

	// Convert to JSON payload
	payload, err := json.Marshal(msg.Payload)
	if err != nil {
		return UniversalMessage{}, err
	}

	// Create a new correlationID if none is specified
	correlationID := uuid.New().String()
	// TODO: get if from another place according to spec
	if msg.Headers.CorrelationID != "" {
		correlationID = msg.Headers.CorrelationID
	}

	// Create universal message
	return UniversalMessage{
		Payload:       payload,
		CorrelationID: correlationID,
	}, nil
}

// Book Information
type Book struct {
	// Title
	Title string `json:"title"`
}
