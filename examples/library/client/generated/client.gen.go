// Package "generated" provides primitives to interact with the AsyncAPI specification.
//
// Code generated by github.com/lerenn/asyncapi-codegen version (devel) DO NOT EDIT.
package generated

import (
	"log"
	"time"
)

// ClientSubscriber represents all application handlers that are expecting messages from application
type ClientSubscriber interface {
	// BooksListResponse
	BooksListResponse(msg BooksListResponseMessage)
}

// ClientController is the structure that provides publishing capabilities to the
// developer and and connect the broker with the client
type ClientController struct {
	brokerController BrokerController
	stopSubscribers  map[string]chan interface{}
}

// NewClientController links the client to the broker
func NewClientController(bs BrokerController) *ClientController {
	// TODO: Check that brokerController is not nil

	return &ClientController{
		brokerController: bs,
		stopSubscribers:  make(map[string]chan interface{}),
	}
}

// Close will clean up any existing resources on the controller
func (cc *ClientController) Close() {
	cc.UnsubscribeAll()

}

// SubscribeAll will subscribe to channels on which the client is expecting messages
func (cc *ClientController) SubscribeAll(cs ClientSubscriber) error {
	// TODO: Check that cs is not nil

	if err := cc.SubscribeBooksListResponse(cs.BooksListResponse); err != nil {
		return err
	}

	return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (cc *ClientController) UnsubscribeAll() {
	cc.UnsubscribeBooksListResponse()
}

// SubscribeBooksListResponse will subscribe to new messages from 'books.list.response' channel
func (cc *ClientController) SubscribeBooksListResponse(fn func(msg BooksListResponseMessage)) error {
	// TODO: check if there is already a subscription

	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("books.list.response")
	if err != nil {
		return err
	}

	// Asynchronously listen to new messages and pass them to client subscriber
	go func() {
		var um UniversalMessage

		for open := true; open; um, open = <-msgs {
			var msg BooksListResponseMessage
			if err := msg.fromUniversalMessage(um); err != nil {
				log.Println("an error happened when receiving an event:", err) // TODO: add proper error handling
				continue
			}

			fn(msg)
		}
	}()

	// Add the stop channel to the inside map
	cc.stopSubscribers["books.list.response"] = stop

	return nil
}

// UnsubscribeBooksListResponse will unsubscribe messages from 'books.list.response' channel
func (cc *ClientController) UnsubscribeBooksListResponse() {
	stopChan, exists := cc.stopSubscribers["books.list.response"]
	if !exists {
		return
	}

	stopChan <- true
	delete(cc.stopSubscribers, "books.list.response")
}

// PublishBooksListRequest will publish messages to 'books.list.request' channel
func (cc *ClientController) PublishBooksListRequest(msg BooksListRequestMessage) error {
	// TODO: check that 'cc' is not nil

	// Convert to UniversalMessage
	um, err := msg.toUniversalMessage()
	if err != nil {
		return err
	}

	// Publish on event broker
	return cc.brokerController.Publish("books.list.request", um)
}

// Listen will let the controller handle subscriptions and will be interrupted
// only when an struct is sent on the interrupt channel
func (cc *ClientController) Listen(irq chan interface{}) {
	<-irq
}

// WaitForBooksListResponse will wait for a specific message by its correlation ID
func (cc *ClientController) WaitForBooksListResponse(correlationID string, timeout time.Duration) (BooksListResponseMessage, error) {
	// Subscribe to broker channel
	msgs, stop, err := cc.brokerController.Subscribe("books.list.response")
	if err != nil {
		return BooksListResponseMessage{}, err
	}

	// Close subscriber on leave
	defer func() { stop <- true }()

	for {
		select {
		case um := <-msgs:
			var msg BooksListResponseMessage
			msg.fromUniversalMessage(um)

			if correlationID == msg.Headers.CorrelationID {
				return msg, nil
			}
		case <-time.After(timeout): // TODO: make it consumable between two call
			return BooksListResponseMessage{}, ErrTimedOut
		}
	}
}
