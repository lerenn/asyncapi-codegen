{{define "schema-definition" -}}

// {{ .Name }} is a schema from the AsyncAPI specification required in messages
{{if .Description -}}
// Description: {{multiLineComment .Description}}
{{end -}}

{{- /* ----------------------------- Object ----------------------------- */ -}}
{{- if eq .Type "object" -}}

type {{ .Name }} struct {
    {{- range $key, $value := .Properties -}}
    {{if $value.Description}}
    // Description: {{multiLineComment $value.Description}}
    {{else if and $value.ReferenceTo $value.ReferenceTo.Description}}
    // Description: {{$value.ReferenceTo.Description}}
    {{end -}}
    {{namify $key}} {{if and (not (isRequired $ $key)) (ne $value.Type "array")}}*{{end}}{{template "schema-name" $value}} `json:"{{snakeCase $key}}"`
    {{end -}}

    {{- if .AdditionalProperties}}
    // AdditionalProperties represents the object additional properties
    AdditionalProperties map[string]{{template "schema-name" .AdditionalProperties}} `json:"-"`
    {{end -}}
}

{{ if and (not .AnyOf) (not .OneOf) -}}
    {{- range $key, $value := getChildrenObjectSchemas . }}
        {{template "schema-definition" $value }}
    {{- end}}
{{- end}}

{{- /* ----------------------------- Others ----------------------------- */ -}}
{{- else -}}

type {{ .Name }} {{template "schema-name" .}}

{{/* Create specific marshaling for time */ -}}
{{- if or (eq .Format "date") (eq .Format "date-time") -}}
// MarshalJSON will override the marshal as this is not a normal 'time.Time' type
func (t {{ .Name }}) MarshalJSON() ([]byte, error) {
    return json.Marshal(time.Time(t))
}

// UnmarshalJSON will override the unmarshal as this is not a normal 'time.Time' type
func (t *{{ .Name }}) UnmarshalJSON(data []byte) error {
    var timeFormat time.Time
    if err := json.Unmarshal(data, &timeFormat);  err != nil {
        return err
    }

    *t = {{ .Name }}(timeFormat)
    return nil
}
{{- end -}}

{{- end -}}

{{- end -}}
