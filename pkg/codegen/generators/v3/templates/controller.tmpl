// {{ .Prefix }}Controller is the structure that provides sending capabilities to the
// developer and and connect the broker with the {{ .Prefix }}
type {{ .Prefix }}Controller struct {
    controller
}

// New{{ .Prefix }}Controller links the {{ .Prefix }} to the broker
func New{{ .Prefix }}Controller(bc extensions.BrokerController, options ...ControllerOption) (*{{ .Prefix }}Controller, error) {
    // Check if broker controller has been provided
    if bc == nil {
        return nil, extensions.ErrNilBrokerController
    }

    // Create default controller
    controller := controller{
        broker:         bc,
        subscriptions:  make(map[string]extensions.BrokerChannelSubscription),
        logger:         extensions.DummyLogger{},
        middlewares:    make([]extensions.Middleware, 0),
    }

    // Apply options
    for _, option := range options {
        option(&controller)
    }

    return &{{ .Prefix }}Controller{controller: controller}, nil
}

func (c {{ .Prefix }}Controller) wrapMiddlewares(
    middlewares []extensions.Middleware,
    callback extensions.NextMiddleware,
) func(ctx context.Context, msg *extensions.BrokerMessage) error {
    var called bool

    // If there is no more middleware
    if len(middlewares) == 0 {
        return func(ctx context.Context, msg *extensions.BrokerMessage) error {
            // Call the callback if it exists and it has not been called already
            if callback != nil && !called {
                called = true
                return callback(ctx)
            }

            // Nil can be returned, as the callback has already been called
            return nil
        }
    }

    // Get the next function to call from next middlewares or callback
    next := c.wrapMiddlewares(middlewares[1:], callback)

    // Wrap middleware into a check function that will call execute the middleware
    // and call the next wrapped middleware if the returned function has not been
    // called already
    return func(ctx context.Context, msg *extensions.BrokerMessage) error {
        // Call the middleware and the following if it has not been done already
        if !called {
            // Create the next call with the context and the message
            nextWithArgs := func(ctx context.Context) error {
                return next(ctx, msg)
            }

            // Call the middleware and register it as already called
            called = true
            if err := middlewares[0](ctx, msg, nextWithArgs); err != nil {
                return err
            }

            // If next has already been called in middleware, it should not be executed again
            return nextWithArgs(ctx)
        }

        // Nil can be returned, as the next middleware has already been called
        return nil
    }
}

func (c {{ .Prefix }}Controller) executeMiddlewares(ctx context.Context, msg *extensions.BrokerMessage, callback extensions.NextMiddleware) error {
    // Wrap middleware to have 'next' function when calling them
    wrapped := c.wrapMiddlewares(c.middlewares, callback)

    // Execute wrapped middlewares
    return wrapped(ctx, msg)
}

func add{{ .Prefix }}ContextValues(ctx context.Context, path string) context.Context {
    ctx = context.WithValue(ctx, extensions.ContextKeyIsVersion, "{{ .Version }}")
    ctx = context.WithValue(ctx, extensions.ContextKeyIsProvider, "{{ snakeCase .Prefix }}")
    return context.WithValue(ctx, extensions.ContextKeyIsChannel, path)
}

// Close will clean up any existing resources on the controller
func (c *{{ .Prefix }}Controller) Close(ctx context.Context) {
    // Unsubscribing remaining channels
{{if .MethodCount -}}
    c.UnlistenAll(ctx)

    c.logger.Info(ctx, "Closed {{ snakeCase .Prefix }} controller")
{{end -}}
}

{{if .MethodCount -}}
// ListenAll will receive to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be received independently.
func (c *{{ .Prefix }}Controller) ListenAll(ctx context.Context, as {{ .Prefix }}Listener) error {
    if as == nil {
        return extensions.ErrNil{{ .Prefix }}Listener
    }

    {{range  $key, $value := .ReceiveOperations -}}
    {{- if not .Channel.ReferenceTo.Parameters }}
    if err := c.Listen{{$value.Name}}(ctx, as.{{$value.Name}}); err != nil {
        return err
    }
    {{- end}}
    {{- end}}

    return nil
}

// UnlistenAll will stop the listening of all remaining listening channels
func (c *{{ .Prefix }}Controller) UnlistenAll(ctx context.Context) {
    {{- range  $key, $value := .ReceiveOperations}}
    {{- if not .Channel.ReferenceTo.Parameters}}
    c.Unlisten{{$value.Name}}(ctx)
    {{- end}}
    {{- end}}
}
{{- end}}

{{range $key, $value := .ReceiveOperations -}}
// Listen{{$value.Name}} will receive '{{$value.GetMessage.Name}}' messages from '{{$value.Channel.ReferenceTo.Address}}' channel
//
// Callback function 'fn' will be called each time a new message is received.
{{- if .Channel.ReferenceTo.Parameters}}
func (c *{{ $.Prefix }}Controller) Listen{{$value.Name}}(ctx context.Context, params {{namifyWithoutParam $value.Channel.Reference.Name}}Parameters, fn func (ctx context.Context, msg {{operationToMessageTypeName $value}})) error {
{{- else}}
func (c *{{ $.Prefix }}Controller) Listen{{$value.Name}}(ctx context.Context, fn func (ctx context.Context, msg {{operationToMessageTypeName $value}})) error {
{{- end }}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path)
    ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "reception")

    // Check if the controller is already listening
    _, exists := c.subscriptions[path]
    if exists {
        err := fmt.Errorf("%w: controller is already listening on channel %q", extensions.ErrAlreadySubscribedChannel, path)
        c.logger.Error(ctx, err.Error())
        return err
    }

    // Subscribe to broker channel
    sub, err := c.broker.Subscribe(ctx, path)
    if err != nil {
        c.logger.Error(ctx, err.Error())
        return err
    }
    c.logger.Info(ctx, "Listening to channel")

    // Asynchronously listen to new messages and pass them to app receiver
    go func() {
        for {
            // Wait for next message
            brokerMsg, open := <-sub.MessagesChannel()

            // If subscription is closed and there is no more message
            // (i.e. uninitialized message), then exit the function
            if !open && brokerMsg.IsUninitialized() {
                return
            }

            // Set broker message to context
            ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

            // Execute middlewares before handling the message
            if err := c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
                // Process message
                msg, err := new{{operationToMessageTypeName $value}}FromBrokerMessage(brokerMsg)
                if err != nil {
                    return err
                }

                {{if ne $value.GetMessage.CorrelationIDLocation "" -}}
                    // Add correlation ID to context if it exists
                    if id := msg.CorrelationID(); id != "" {
                        ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, id)
                    }
                {{- end}}

                // Execute the subscription function
                fn(ctx, msg)

                return nil
            }); err != nil {
                c.logger.Error(ctx, err.Error())
            }
        }
    } ()

    // Add the cancel channel to the inside map
    c.subscriptions[path] = sub

    return nil
}

// Unlisten{{$value.Name}} will stop the reception of messages from '{{$value.Channel.ReferenceTo.Address}}' channel.
// A timeout can be set in context to avoid blocking operation, if needed.
{{- if .Channel.ReferenceTo.Parameters}}
func (c *{{ $.Prefix }}Controller) Unlisten{{$value.Name}}(ctx context.Context, params {{namifyWithoutParam $key}}Parameters) {
{{- else}}
func (c *{{ $.Prefix }}Controller) Unlisten{{$value.Name}}(ctx context.Context) {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Check if there receivers for this channel
    sub, exists := c.subscriptions[path]
    if !exists {
        return
    }

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path)

    // Stop the subscription
    sub.Cancel(ctx)

    // Remove if from the receivers
    delete(c.subscriptions, path)

    c.logger.Info(ctx, "Unlistend from channel")
}
{{- end}}

{{- range  $key, $value := .SendOperations}}
// Send{{$value.Name}} will send '{{$value.GetMessage.Name}}' messages to '{{$value.Channel.ReferenceTo.Address}}' channel
{{- if .Channel.ReferenceTo.Parameters }}
func (c *{{ $.Prefix }}Controller) Send{{$value.Name}}(ctx context.Context, params {{namifyWithoutParam $value.Channel.Reference.Name}}Parameters, msg {{operationToMessageTypeName $value}}) error {
{{- else }}
func (c *{{ $.Prefix }}Controller) Send{{$value.Name}}(ctx context.Context, msg {{operationToMessageTypeName $value}}) error {
{{- end }}
    // Get channel path
    path := {{ generateChannelPath $value }}

    {{if ne $value.GetMessage.CorrelationIDLocation "" -}}
    // Set correlation ID if it does not exist
    if id := msg.CorrelationID(); id == "" {
        msg.SetCorrelationID(uuid.New().String())
    }
    {{- end}}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path)
    ctx = context.WithValue(ctx, extensions.ContextKeyIsDirection, "publication")
    {{if ne $value.GetMessage.CorrelationIDLocation "" -}}
    ctx = context.WithValue(ctx, extensions.ContextKeyIsCorrelationID, msg.CorrelationID())
    {{- end}}

    // Convert to BrokerMessage
    brokerMsg, err := msg.toBrokerMessage()
    if err != nil  {
        return err
    }

    // Set broker message to context
    ctx = context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())

    // Send the message on event-broker through middlewares
    return c.executeMiddlewares(ctx, &brokerMsg, func(ctx context.Context) error {
        return c.broker.Publish(ctx, path, brokerMsg)
    })
}
{{end}}

{{if eq .Prefix "User" -}}
{{- range  $key, $value := .ReceiveOperations -}}
{{- if ne $value.GetMessage.CorrelationIDLocation ""}}
// WaitFor{{$value.Name}} will wait for a specific message by its correlation ID.
//
// The pub function is the publication function that should be used to send the message.
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message.
//
// A timeout can be set in context to avoid blocking operation, if needed.
{{- if .Channel.ReferenceTo.Parameters}}
func (c *UserController) WaitFor{{$value.Name}}(ctx context.Context, params {{namifyWithoutParam $value.Channel.Reference.Name}}Parameters, sentMsg MessageWithCorrelationID, pub func(ctx context.Context) error) ({{operationToMessageTypeName $value}}, error) {
{{- else}}
func (c *UserController) WaitFor{{$value.Name}}(ctx context.Context, sentMsg MessageWithCorrelationID, pub func(ctx context.Context) error) ({{operationToMessageTypeName $value}}, error) {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path)

    // Receive to broker channel
    sub, err := c.broker.Subscribe(ctx, path)
    if err != nil {
        c.logger.Error(ctx, err.Error())
        return {{operationToMessageTypeName $value}}{}, err
    }
    c.logger.Info(ctx, "Received to channel")

    // Close receiver on leave
    defer func(){
        // Stop the subscription
        sub.Cancel(ctx)

        // Logging unsubscribing
        c.logger.Info(ctx, "Unlistend from channel")
    } ()

    // Execute callback for publication
    if err = pub(ctx); err != nil {
        return {{operationToMessageTypeName $value}}{}, err
    }

    // Wait for corresponding response
    for {
        select {
        case brokerMsg, open := <-sub.MessagesChannel():
            // If subscription is closed and there is no more message
            // (i.e. uninitialized message), then the subscription ended before
            // receiving the expected message
            if !open && brokerMsg.IsUninitialized() {
                c.logger.Error(ctx, "Channel closed before getting message")
                return {{operationToMessageTypeName $value}}{}, extensions.ErrSubscriptionCanceled
            }

            // Get new message
            msg, err := new{{operationToMessageTypeName $value}}FromBrokerMessage(brokerMsg)
            if err != nil {
                c.logger.Error(ctx, err.Error())
            }

            // If message doesn't have corresponding correlation ID, then continue
            if sentMsg.CorrelationID() != msg.CorrelationID() {
                continue
            }

            // Set context with received values as it is the expected message
            msgCtx := context.WithValue(ctx, extensions.ContextKeyIsBrokerMessage, brokerMsg.String())
            msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsDirection, "reception")
            msgCtx = context.WithValue(msgCtx, extensions.ContextKeyIsCorrelationID, sentMsg.CorrelationID())

            // Execute middlewares before returning
            if err := c.executeMiddlewares(msgCtx, &brokerMsg, nil); err != nil {
                return {{operationToMessageTypeName $value}}{}, err
            }

            // Return the message to the caller from the broker that could have
            // been modified by middlewares
            return new{{operationToMessageTypeName $value}}FromBrokerMessage(brokerMsg)
        case <-ctx.Done(): // Set corrsponding error if context is done
            c.logger.Error(ctx, "Context done before getting message")
            return {{operationToMessageTypeName $value}}{}, extensions.ErrContextCanceled
        }
    }
}
{{- end -}}
{{- end -}}
{{- end}}
