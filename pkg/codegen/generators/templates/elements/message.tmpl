{{define "message" -}}
struct {

{{- /* Display headers if they exists */}}
{{- if .Headers}}
// Headers will be used to fill the message headers
Headers {{template "any" .Headers}}
{{end -}}

{{- /* Display payload */}}
// Payload will be inserted in the message payload
Payload {{template "any" .Payload}}
}

// fromUniversalMessage will fill {{namify .Name}}Message with data from UniversalMessage
func (msg *{{namify .Name}}Message) fromUniversalMessage(um UniversalMessage) error {
    // Unmarshal payload to expected message payload format
    err := json.Unmarshal(um.Payload, &msg.Payload)
    if err != nil {
        return err
    }

    {{if ne $.CorrelationIDLocation "" -}}
    // Get correlation ID
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = um.CorrelationID
    {{- end}}
    
    // TODO: run checks on msg type

    return nil
}

// toUniversalMessage will generate an UniversalMessage from {{namify .Name}}Message data
func (msg {{namify .Name}}Message) toUniversalMessage() (UniversalMessage, error) {
    // TODO: implement checks on message

    // Marshal payload to JSON
    payload, err := json.Marshal(msg.Payload)
    if err != nil {
        return UniversalMessage{}, err
    }

    {{if ne $.CorrelationIDLocation "" -}}
    // Set correlation ID if it does not exist
    var correlationID string
    if msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} != "" {
        correlationID = msg.{{referenceToStructAttributePath $.CorrelationIDLocation}}
    } else {
        correlationID = uuid.New().String()
    }
    {{- end}}

    return UniversalMessage{
        Payload: payload,
        {{- if ne $.CorrelationIDLocation ""}}
        CorrelationID: correlationID,
        {{- end}}
    }, nil
}
{{- end }}
