{{define "message" -}}

// {{namify .Name}}Message is the message expected for '{{namify .Name}}' channel
{{if $.Description -}}
// {{multiLineComment $.Description}}
{{end -}}

type {{namify .Name}}Message struct {

{{- /* Display headers if they exists */}}
{{- if .Headers}}
// Headers will be used to fill the message headers
Headers {{template "any" .Headers}}
{{end -}}

{{- /* Display payload */}}
// Payload will be inserted in the message payload
Payload {{template "any" .Payload}}
}

func New{{namify .Name}}Message() {{namify .Name}}Message {
    var msg {{namify .Name}}Message

    {{if ne $.CorrelationIDLocation "" -}}
    // Set correlation ID
    u := uuid.New().String()
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = {{if not $.CorrelationIDRequired}}&{{end}}u
    {{- end}}
    
    return msg
}

// new{{namify .Name}}MessageFromBrokerMessage will fill a new {{namify .Name}}Message with data from generic broker message
func new{{namify .Name}}MessageFromBrokerMessage(bMsg extensions.BrokerMessage) ({{namify .Name}}Message, error) {
    var msg {{namify .Name}}Message
   
    // Unmarshal payload to expected message payload format
    err := json.Unmarshal(bMsg.Payload, &msg.Payload)
    if err != nil {
        return msg, err
    }

    {{if ne $.CorrelationIDLocation "" -}}
    // Get correlation ID
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = bMsg.CorrelationID
    {{- end}}
    
    // TODO: run checks on msg type

    return msg, nil
}

// toBrokerMessage will generate a generic broker message from {{namify .Name}}Message data
func (msg {{namify .Name}}Message) toBrokerMessage() (extensions.BrokerMessage, error) {
    // TODO: implement checks on message

    // Marshal payload to JSON
    payload, err := json.Marshal(msg.Payload)
    if err != nil {
        return extensions.BrokerMessage{}, err
    }

    {{if ne $.CorrelationIDLocation "" -}}
    // Set correlation ID if it does not exist
    var correlationID {{if not $.CorrelationIDRequired}}*{{end}}string
    if msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} != {{if $.CorrelationIDRequired}}""{{else}}nil{{end}} {
        correlationID = msg.{{referenceToStructAttributePath $.CorrelationIDLocation}}
    } else {
        u := uuid.New().String()
        correlationID = {{if not $.CorrelationIDRequired}}&{{end}}u
    }
    {{- end}}

    return extensions.BrokerMessage{
        Payload: payload,
        {{- if ne $.CorrelationIDLocation ""}}
        CorrelationID: correlationID,
        {{- end}}
    }, nil
}

{{if ne $.CorrelationIDLocation "" -}}
// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg {{namify .Name}}Message) CorrelationID() string {
    {{if $.CorrelationIDRequired -}}
        return msg.{{referenceToStructAttributePath $.CorrelationIDLocation}}
    {{- else -}}
    if msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} != nil{
        return *msg.{{referenceToStructAttributePath $.CorrelationIDLocation}}
    }

    return ""
    {{- end}}
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *{{namify .Name}}Message) SetAsResponseFrom(req MessageWithCorrelationID) {
    id := req.CorrelationID()
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = {{if not $.CorrelationIDRequired -}}&{{end}}id
}
{{- end -}}
{{- end }}
