{{define "message" -}}

// {{namify .Name}}Message is the message expected for '{{namify .Name}}' channel
{{if $.Description -}}
// {{multiLineComment $.Description}}
{{end -}}

type {{namify .Name}}Message struct {

{{- /* Display headers if they exists */}}
{{- if .Headers}}
// Headers will be used to fill the message headers
Headers {{template "any" .Headers}}
{{end -}}

{{- /* Display payload */}}
// Payload will be inserted in the message payload
Payload {{template "any" .Payload}}
}

func New{{namify .Name}}Message() {{namify .Name}}Message {
    var msg {{namify .Name}}Message

    {{if ne $.CorrelationIDLocation "" -}}
    // Set correlation ID
    u := uuid.New().String()
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = {{if not $.CorrelationIDRequired}}&{{end}}u
    {{- end}}
    
    return msg
}

// new{{namify .Name}}MessageFromBrokerMessage will fill a new {{namify .Name}}Message with data from generic broker message
func new{{namify .Name}}MessageFromBrokerMessage(bMsg extensions.BrokerMessage) ({{namify .Name}}Message, error) {
    var msg {{namify .Name}}Message
   
    // Unmarshal payload to expected message payload format
    err := json.Unmarshal(bMsg.Payload, &msg.Payload)
    if err != nil {
        return msg, err
    }
    
    {{ if .Headers -}}
    // Get each headers from broker message
    for k, v := range bMsg.Headers {
        switch {
            {{- range  $key, $value := .Headers.Properties}}
            case k == "{{$key}}": // Retrieving {{namify $key}} header
                {{- if eq $value.Type "object" }}
                    {{- if $value.IsRequired }}
                        err := json.Unmarshal(v, &msg.Headers.{{ namify $key}})
                    {{- else }}
                        err := json.Unmarshal(v, msg.Headers.{{ namify $key}})
                    {{- end }}
                    if err != nil {
                        return msg, err
                    }
                {{- else }}
                    {{- if $value.IsRequired }}
                    msg.Headers.{{ namify $key}} = {{$value.Type}}(v)
                    {{- else}}
                    h := {{$value.Type}}(v)
                    msg.Headers.{{ namify $key}} = &h
                    {{- end}}
                {{- end}}
            {{- end}}
        default:
            // TODO: log unknown error
        }
    }
    {{- end}}
    
    // TODO: run checks on msg type

    return msg, nil
}

// toBrokerMessage will generate a generic broker message from {{namify .Name}}Message data
func (msg {{namify .Name}}Message) toBrokerMessage() (extensions.BrokerMessage, error) {
    // TODO: implement checks on message

    // Marshal payload to JSON
    payload, err := json.Marshal(msg.Payload)
    if err != nil {
        return extensions.BrokerMessage{}, err
    }

    {{ if .Headers -}}
    // Add each headers to broker message
    headers := make(map[string][]byte, {{ len .Headers.Properties }})

    {{range  $key, $value := .Headers.Properties -}}
        // Adding {{ namify $key}} header
        {{- if eq $value.Type "object" }}
            {{- if $value.IsRequired }}
                h, err := json.Marshal(msg.Headers.{{ namify $key}})
                if err != nil {
                    return extensions.BrokerMessage{}, err
                }
                headers["{{$key}}"] = h
            {{- else }}
            if msg.Headers.{{namify $key}} != nil {
                h, err := json.Marshal(*msg.Headers.{{ namify $key}})
                if err != nil {
                    return extensions.BrokerMessage{}, err
                }
                headers["{{$key}}"] = h
            }
            {{- end }}
        {{- else }}
            {{- if $value.IsRequired }}
                headers["{{$key}}"] = []byte(msg.Headers.{{namify $key}})
            {{- else}}
                if msg.Headers.{{namify $key}} != nil {
                    headers["{{$key}}"] = []byte(*msg.Headers.{{namify $key}})
                }
            {{- end }}
        {{- end }}
    {{- end}}
    {{ else -}}
    // There is no headers here
    headers := make(map[string][]byte, 0)
    {{- end}}

    return extensions.BrokerMessage{
        Headers: headers,
        Payload: payload,
    }, nil
}

{{if ne $.CorrelationIDLocation "" -}}
// CorrelationID will give the correlation ID of the message, based on AsyncAPI spec
func (msg {{namify .Name}}Message) CorrelationID() string {
    {{if $.CorrelationIDRequired -}}
        return msg.{{referenceToStructAttributePath $.CorrelationIDLocation}}
    {{- else -}}
    if msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} != nil{
        return *msg.{{referenceToStructAttributePath $.CorrelationIDLocation}}
    }

    return ""
    {{- end}}
}

// SetCorrelationID will set the correlation ID of the message, based on AsyncAPI spec
func (msg *{{namify .Name}}Message) SetCorrelationID(id string) {
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = {{if not $.CorrelationIDRequired -}}&{{end}}id
}

// SetAsResponseFrom will correlate the message with the one passed in parameter.
// It will assign the 'req' message correlation ID to the message correlation ID,
// both specified in AsyncAPI spec.
func (msg *{{namify .Name}}Message) SetAsResponseFrom(req MessageWithCorrelationID) {
    id := req.CorrelationID()
    msg.{{referenceToStructAttributePath $.CorrelationIDLocation}} = {{if not $.CorrelationIDRequired -}}&{{end}}id
}
{{- end -}}
{{- end }}
