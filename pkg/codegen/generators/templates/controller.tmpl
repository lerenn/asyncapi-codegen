// {{ .Prefix }}Controller is the structure that provides publishing capabilities to the
// developer and and connect the broker with the {{ .Prefix }}
type {{ .Prefix }}Controller struct {
    brokerController BrokerController
    stopSubscribers  map[string]chan interface{}
    logger           log.Logger
}

// New{{ .Prefix }}Controller links the {{ .Prefix }} to the broker
func New{{ .Prefix }}Controller(bs BrokerController) (*{{ .Prefix }}Controller, error) {
    if bs == nil {
        return nil, ErrNilBrokerController
    }

    return &{{ .Prefix }}Controller{
        brokerController: bs,
        stopSubscribers:  make(map[string]chan interface{}),
        logger: log.Silent{},
    }, nil
}

// SetLogger attaches a logger that will log operations on controller
func (c *{{ .Prefix }}Controller) SetLogger(logger log.Logger) {
    c.logger = logger
    c.brokerController.SetLogger(logger)
}

// LogError logs error if the logger has been set
func (c {{ .Prefix }}Controller) LogError(ctx log.Context, msg string) {
    // Add more context
    ctx.Module = "asyncapi"
    ctx.Provider = "{{ snakeCase .Prefix }}"

    // Log error
    c.logger.Error(ctx, msg)
}

// LogInfo logs information if the logger has been set
func (c {{ .Prefix }}Controller) LogInfo(ctx log.Context, msg string) {
    // Add more context
    ctx.Module = "asyncapi"
    ctx.Provider = "{{ snakeCase .Prefix }}"

    // Log info
    c.logger.Info(ctx, msg)
}

// Close will clean up any existing resources on the controller
func (c *{{ .Prefix }}Controller) Close() {
    // Unsubscribing remaining channels
{{if .MethodCount -}}
    c.LogInfo(log.Context{}, "Closing {{ .Prefix }} controller")
    c.UnsubscribeAll()
{{end -}}
}

{{if .MethodCount -}}
// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *{{ .Prefix }}Controller) SubscribeAll(as {{ .Prefix }}Subscriber) error {
    if as == nil {
        return ErrNil{{ .Prefix }}Subscriber
    }

    {{range  $key, $value := .SubscribeChannels -}}
    {{- if not .Parameters }}
    if err := c.Subscribe{{namify $key}}(as.{{namify $key}}); err != nil {
        return err
    }
    {{- end}}
    {{- end}}

    return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *{{ .Prefix }}Controller) UnsubscribeAll() {
    // Unsubscribe channels with no parameters (if any)
    {{- range  $key, $value := .SubscribeChannels}}
    {{- if not .Parameters}}
    c.Unsubscribe{{namify $key}}()
    {{- end}}
    {{- end}}

    // Unsubscribe remaining channels
    for n, stopChan := range c.stopSubscribers {
        stopChan <- true
        delete(c.stopSubscribers, n)
    }
}
{{- end}}

{{range  $key, $value := .SubscribeChannels -}}
// Subscribe{{namify $key}} will subscribe to new messages from '{{$key}}' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
{{- if .Parameters}}
func (c *{{ $.Prefix }}Controller) Subscribe{{namify $key}}(params {{namify $key}}Parameters, fn func (msg {{channelToMessageTypeName $value}}, done bool)) error {
{{- else}}
func (c *{{ $.Prefix }}Controller) Subscribe{{namify $key}}(fn func (msg {{channelToMessageTypeName $value}}, done bool)) error {
{{- end }}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Check if there is already a subscription
    _, exists := c.stopSubscribers[path]
    if exists {
        err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
        c.LogError(log.Context{Action: path}, err.Error())
        return err
    }

    // Subscribe to broker channel
    c.LogInfo(log.Context{Action: path, Operation: "subscribe"}, "Subscribing to channel")
    msgs, stop, err := c.brokerController.Subscribe(path)
    if err != nil {
        c.LogError(log.Context{Action: path, Operation: "subscribe"}, err.Error())
        return err
    }

    // Asynchronously listen to new messages and pass them to app subscriber
    go func() {
        for {
            // Wait for next message
            um, open := <-msgs

            // Process message
            msg, err := new{{channelToMessageTypeName $value}}FromUniversalMessage(um)
            if err != nil {
                c.LogError(log.Context{Action: path, Operation: "subscribe", Message: msg}, err.Error())
            }
            
            // Send info if message is correct or susbcription is closed
            if err == nil || !open {
                c.LogInfo(log.Context{Action: path, Operation: "subscribe", Message: msg}, "Received new message")
                fn(msg, !open)
            }

            // If subscription is closed, then exit the function
            if !open {
                return
            }
        }
    } ()

    // Add the stop channel to the inside map
    c.stopSubscribers[path] = stop

    return nil
}

// Unsubscribe{{namify $key}} will unsubscribe messages from '{{$key}}' channel
{{- if .Parameters}}
func (c *{{ $.Prefix }}Controller) Unsubscribe{{namify $key}}(params {{namify $key}}Parameters) {
{{- else}}
func (c *{{ $.Prefix }}Controller) Unsubscribe{{namify $key}}() {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Get stop channel
    stopChan, exists := c.stopSubscribers[path]
    if !exists {
        return
    }

    // Stop the channel and remove the entry
    c.LogInfo(log.Context{Action: path, Operation: "unsubscribe"}, "Unsubscribing from channel")
    stopChan <- true
    delete(c.stopSubscribers, path)
}
{{- end}}

{{- range  $key, $value := .PublishChannels}}
// Publish{{namify $key}} will publish messages to '{{$key}}' channel
{{- if .Parameters }}
func (c *{{ $.Prefix }}Controller) Publish{{namify $key}}(params {{namify $key}}Parameters, msg {{channelToMessageTypeName $value}}) error {
{{- else }}
func (c *{{ $.Prefix }}Controller) Publish{{namify $key}}(msg {{channelToMessageTypeName $value}}) error {
{{- end }}
    // Convert to UniversalMessage
    um, err := msg.toUniversalMessage()
    if err != nil  {
        return err
    }

    // Get channel path
    path := {{ generateChannelPath $value }}

    // Publish on event broker
    c.LogInfo(log.Context{Action: path, Operation: "publish", Message: msg}, "Publishing to channel")
    return c.brokerController.Publish(path, um)
}
{{end}}

{{if eq .Prefix "Client" -}}
{{- range  $key, $value := .SubscribeChannels -}}
{{- if ne $value.Subscribe.Message.CorrelationIDLocation ""}}
// WaitFor{{namify $key}} will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
{{- if .Parameters}}
func (cc *ClientController) WaitFor{{namify $key}}(ctx context.Context, params {{namify $key}}Parameters, publishMsg MessageWithCorrelationID, pub func() error) ({{channelToMessageTypeName $value}}, error) {
{{- else}}
func (cc *ClientController) WaitFor{{namify $key}}(ctx context.Context, publishMsg MessageWithCorrelationID, pub func() error) ({{channelToMessageTypeName $value}}, error) {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Subscribe to broker channel
    cc.LogInfo(log.Context{Action: path, Operation: "wait-for", CorrelationID: publishMsg.CorrelationID()}, "Wait for response")
    msgs, stop, err := cc.brokerController.Subscribe(path)
    if err != nil {
        cc.LogError(log.Context{Action: path, Operation: "wait-for"}, err.Error())
        return {{channelToMessageTypeName $value}}{}, err
    }

    // Close subscriber on leave
    defer func(){ stop <- true } ()

    // Execute publication 
    cc.LogInfo(log.Context{Action: path, Operation: "wait-for", Message: publishMsg, CorrelationID: publishMsg.CorrelationID()}, 
        "Sending request",
    )
    if err := pub(); err != nil {
        return {{channelToMessageTypeName $value}}{}, err
    }

    // Wait for corresponding response
    for {
        select {
        case um, open := <-msgs:
            // Get new message
            msg, err := new{{channelToMessageTypeName $value}}FromUniversalMessage(um)
            if err != nil {
                cc.LogError(log.Context{Action: path, Operation: "wait-for"}, err.Error())
            }

            // If valid message with corresponding correlation ID, return message
            if err == nil && publishMsg.CorrelationID() == msg.CorrelationID() {
                cc.LogInfo(log.Context{Action: path, Operation: "wait-for", Message: msg, CorrelationID: msg.CorrelationID()}, 
                    "Received expected message",
                )
                return msg, nil
            } else if !open { // If message is invalid or not corresponding and the subscription is closed, then return error
                cc.LogError(log.Context{Action: path, Operation: "wait-for", CorrelationID: publishMsg.CorrelationID()}, 
                    "Channel closed before getting message",
                )
                return {{channelToMessageTypeName $value}}{}, ErrSubscriptionCanceled
            }
        case <-ctx.Done(): // Return error if context is done
            cc.LogError(log.Context{Action: path, Operation: "wait-for", CorrelationID: publishMsg.CorrelationID()}, 
                "Context done before getting message",
            )
            return {{channelToMessageTypeName $value}}{}, ErrContextCanceled
        }
    }
}
{{- end -}}
{{- end -}}
{{- end}}
