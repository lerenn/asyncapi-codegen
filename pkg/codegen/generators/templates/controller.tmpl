// {{ .Prefix }}Controller is the structure that provides publishing capabilities to the
// developer and and connect the broker with the {{ .Prefix }}
type {{ .Prefix }}Controller struct {
    brokerController BrokerController
    stopSubscribers  map[string]chan interface{}
    logger           log.Interface
    middlewares      []middleware.Middleware
}

// New{{ .Prefix }}Controller links the {{ .Prefix }} to the broker
func New{{ .Prefix }}Controller(bs BrokerController) (*{{ .Prefix }}Controller, error) {
    if bs == nil {
        return nil, ErrNilBrokerController
    }

    return &{{ .Prefix }}Controller{
        brokerController: bs,
        stopSubscribers:  make(map[string]chan interface{}),
        logger:           log.Silent{},
        middlewares:      make([]middleware.Middleware, 0),
    }, nil
}

// SetLogger attaches a logger that will log operations on controller
func (c *{{ .Prefix }}Controller) SetLogger(logger log.Interface) {
    c.logger = logger
    c.brokerController.SetLogger(logger)
}

// AddMiddlewares attaches middlewares that will be executed when sending or
// receiving messages
func (c *{{ .Prefix }}Controller) AddMiddlewares(middleware ...middleware.Middleware) {
    c.middlewares = append(c.middlewares, middleware...)
}

func (c {{ .Prefix }}Controller) wrapMiddlewares(middlewares []middleware.Middleware, last middleware.Next) func(ctx context.Context) {
    var called bool
   
    // If there is no more middleware
    if len(middlewares) == 0 {
        return func(ctx context.Context) {
            if !called {
                called = true
                last(ctx)
            }
        }
    }

    // Wrap middleware into a check function that will call execute the middleware
    // and call the next wrapped middleware if the returned function has not been
    // called already
    next := c.wrapMiddlewares(middlewares[1:], last)
    return func(ctx context.Context) {
        // Call the middleware and the following if it has not been done already
        if !called {
            called = true
            ctx = middlewares[0](ctx, next)

            // If next has already been called in middleware, it should not be
            // executed again
            next(ctx)
        }
    }
}

func (c {{ .Prefix }}Controller) executeMiddlewares(ctx context.Context, callback func(ctx context.Context)) {
    // Wrap middleware to have 'next' function when calling them
    wrapped := c.wrapMiddlewares(c.middlewares, callback)

    // Execute wrapped middlewares
    wrapped(ctx)
}

func add{{ .Prefix }}ContextValues(ctx context.Context, path, operation string) context.Context {
    ctx = context.WithValue(ctx, apiContext.KeyIsModule, "asyncapi")
    ctx = context.WithValue(ctx, apiContext.KeyIsProvider, "{{ snakeCase .Prefix }}")
    ctx = context.WithValue(ctx, apiContext.KeyIsChannel, path)
    return context.WithValue(ctx, apiContext.KeyIsOperation, operation)
}

// Close will clean up any existing resources on the controller
func (c *{{ .Prefix }}Controller) Close(ctx context.Context) {
    // Unsubscribing remaining channels
{{if .MethodCount -}}
    c.logger.Info(ctx, "Closing {{ .Prefix }} controller")
    c.UnsubscribeAll(ctx)
{{end -}}
}

{{if .MethodCount -}}
// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *{{ .Prefix }}Controller) SubscribeAll(ctx context.Context, as {{ .Prefix }}Subscriber) error {
    if as == nil {
        return ErrNil{{ .Prefix }}Subscriber
    }

    {{range  $key, $value := .SubscribeChannels -}}
    {{- if not .Parameters }}
    if err := c.Subscribe{{namify $key}}(ctx, as.{{namify $key}}); err != nil {
        return err
    }
    {{- end}}
    {{- end}}

    return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *{{ .Prefix }}Controller) UnsubscribeAll(ctx context.Context) {
    // Unsubscribe channels with no parameters (if any)
    {{- range  $key, $value := .SubscribeChannels}}
    {{- if not .Parameters}}
    c.Unsubscribe{{namify $key}}(ctx)
    {{- end}}
    {{- end}}

    // Unsubscribe remaining channels
    for n, stopChan := range c.stopSubscribers {
        stopChan <- true
        delete(c.stopSubscribers, n)
    }
}
{{- end}}

{{range  $key, $value := .SubscribeChannels -}}
// Subscribe{{namify $key}} will subscribe to new messages from '{{$key}}' channel.
//
// Callback function 'fn' will be called each time a new message is received.
// The 'done' argument indicates when the subscription is canceled and can be
// used to clean up resources.
{{- if .Parameters}}
func (c *{{ $.Prefix }}Controller) Subscribe{{namify $key}}(ctx context.Context, params {{namify $key}}Parameters, fn func (ctx context.Context, msg {{channelToMessageTypeName $value}}, done bool)) error {
{{- else}}
func (c *{{ $.Prefix }}Controller) Subscribe{{namify $key}}(ctx context.Context, fn func (ctx context.Context, msg {{channelToMessageTypeName $value}}, done bool)) error {
{{- end }}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path, "subscribe")
    ctx = context.WithValue(ctx, apiContext.KeyIsDirection, "reception")
    
    // Check if there is already a subscription
    _, exists := c.stopSubscribers[path]
    if exists {
        err := fmt.Errorf("%w: %q channel is already subscribed", ErrAlreadySubscribedChannel, path)
        c.logger.Error(ctx, err.Error())
        return err
    }

    // Subscribe to broker channel
    c.logger.Info(ctx, "Subscribing to channel")
    msgs, stop, err := c.brokerController.Subscribe(ctx, path)
    if err != nil {
        c.logger.Error(ctx, err.Error())
        return err
    }

    // Asynchronously listen to new messages and pass them to app subscriber
    go func() {
        for {
            // Wait for next message
            um, open := <-msgs

            {{- /* TODO: check context deadline/canceled */}}

            // Process message
            msg, err := new{{channelToMessageTypeName $value}}FromUniversalMessage(um)
            if err != nil {
                ctx = context.WithValue(ctx, apiContext.KeyIsMessage, um)
                c.logger.Error(ctx, err.Error())
            }
            ctx = context.WithValue(ctx, apiContext.KeyIsMessage, msg)
            
            // Send info if message is correct or susbcription is closed
            if err == nil || !open {
                c.logger.Info(ctx, "Received new message")

                // Execute middlewares with the callback
                c.executeMiddlewares(ctx, func(ctx context.Context) {
                    fn(ctx, msg, !open)
                })
            }

            // If subscription is closed, then exit the function
            if !open {
                return
            }
        }
    } ()

    // Add the stop channel to the inside map
    c.stopSubscribers[path] = stop

    return nil
}

// Unsubscribe{{namify $key}} will unsubscribe messages from '{{$key}}' channel
{{- if .Parameters}}
func (c *{{ $.Prefix }}Controller) Unsubscribe{{namify $key}}(ctx context.Context, params {{namify $key}}Parameters) {
{{- else}}
func (c *{{ $.Prefix }}Controller) Unsubscribe{{namify $key}}(ctx context.Context) {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path, "unsubscribe")

    // Get stop channel
    stopChan, exists := c.stopSubscribers[path]
    if !exists {
        return
    }

    // Stop the channel and remove the entry
    c.logger.Info(ctx, "Unsubscribing from channel")
    stopChan <- true
    delete(c.stopSubscribers, path)
}
{{- end}}

{{- range  $key, $value := .PublishChannels}}
// Publish{{namify $key}} will publish messages to '{{$key}}' channel
{{- if .Parameters }}
func (c *{{ $.Prefix }}Controller) Publish{{namify $key}}(ctx context.Context, params {{namify $key}}Parameters, msg {{channelToMessageTypeName $value}}) error {
{{- else }}
func (c *{{ $.Prefix }}Controller) Publish{{namify $key}}(ctx context.Context, msg {{channelToMessageTypeName $value}}) error {
{{- end }}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path, "publish")
    ctx = context.WithValue(ctx, apiContext.KeyIsMessage, msg)
    ctx = context.WithValue(ctx, apiContext.KeyIsDirection, "publication")

    // Convert to UniversalMessage
    um, err := msg.toUniversalMessage()
    if err != nil  {
        return err
    }

    // Publish the message in middlewares
    c.executeMiddlewares(ctx, func(ctx context.Context) {
        // Publish on event broker
        c.logger.Info(ctx, "Publishing to channel")
        err = c.brokerController.Publish(ctx, path, um)
    })

    // Return error from publication on broker
    return err
}
{{end}}

{{if eq .Prefix "Client" -}}
{{- range  $key, $value := .SubscribeChannels -}}
{{- if ne $value.Subscribe.Message.CorrelationIDLocation ""}}
// WaitFor{{namify $key}} will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
{{- if .Parameters}}
func (cc *ClientController) WaitFor{{namify $key}}(ctx context.Context, params {{namify $key}}Parameters, publishMsg MessageWithCorrelationID, pub func(ctx context.Context) error) ({{channelToMessageTypeName $value}}, error) {
{{- else}}
func (cc *ClientController) WaitFor{{namify $key}}(ctx context.Context, publishMsg MessageWithCorrelationID, pub func(ctx context.Context) error) ({{channelToMessageTypeName $value}}, error) {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Set context
    ctx = add{{ $.Prefix }}ContextValues(ctx, path, "wait-for")
    ctx = context.WithValue(ctx, apiContext.KeyIsMessage, publishMsg)
    ctx = context.WithValue(ctx, apiContext.KeyIsCorrelationID, publishMsg.CorrelationID())
    ctx = context.WithValue(ctx, apiContext.KeyIsDirection, "reception")

    // Subscribe to broker channel
    cc.logger.Info(ctx, "Wait for response")
    msgs, stop, err := cc.brokerController.Subscribe(ctx, path)
    if err != nil {
        cc.logger.Error(ctx, err.Error())
        return {{channelToMessageTypeName $value}}{}, err
    }

    // Close subscriber on leave
    defer func(){ stop <- true } ()

    // Execute middlewares before publishing
    var msg {{channelToMessageTypeName $value}}
    cc.executeMiddlewares(ctx, func(ctx context.Context) {
        // Execute publication 
        cc.logger.Info(ctx, "Publish request")
        if err = pub(ctx); err != nil {
            return
        }

        // Wait for corresponding response
        for {
            select {
            case um, open := <-msgs:
            
                // Get new message
                msg, err = new{{channelToMessageTypeName $value}}FromUniversalMessage(um)
                if err != nil {
                    cc.logger.Error(ctx, err.Error())
                }

                // If valid message with corresponding correlation ID, return message
                if err == nil && publishMsg.CorrelationID() == msg.CorrelationID() {
                    cc.logger.Info(ctx, "Received expected message")
                    return
                } else if !open { // If message is invalid or not corresponding and the subscription is closed, then set corresponding error
                    cc.logger.Error(ctx, "Channel closed before getting message")
                    err = ErrSubscriptionCanceled
                    return
                }
            case <-ctx.Done(): // Set corrsponding error if context is done
                cc.logger.Error(ctx, "Context done before getting message")
                err = ErrContextCanceled
                return
            }
        }
    })

    return msg, err
}
{{- end -}}
{{- end -}}
{{- end}}
