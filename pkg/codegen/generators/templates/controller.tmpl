// {{ .Prefix }}Controller is the structure that provides publishing capabilities to the
// developer and and connect the broker with the {{ .Prefix }}
type {{ .Prefix }}Controller struct {
    brokerController BrokerController
    stopSubscribers  map[string]chan interface{}
    errChan          chan Error
}

// New{{ .Prefix }}Controller links the {{ .Prefix }} to the broker
func New{{ .Prefix }}Controller(bs BrokerController) (*{{ .Prefix }}Controller, error) {
    if bs == nil {
        return nil, ErrNilBrokerController
    }

    return &{{ .Prefix }}Controller{
        brokerController: bs,
        stopSubscribers:  make(map[string]chan interface{}),
        errChan:          make(chan Error, 256),
    }, nil
}

// Errors will give back the channel that contains errors and that you can listen to handle errors
// Please take a look at Error struct form information on error
func (c {{ .Prefix }}Controller) Errors() <-chan Error {
    return c.errChan
}

// Close will clean up any existing resources on the controller
func (c *{{ .Prefix }}Controller) Close() {
{{if .MethodCount -}}
    c.UnsubscribeAll()
{{end -}}
    close(c.errChan)
}

{{if .MethodCount -}}
// SubscribeAll will subscribe to channels without parameters on which the app is expecting messages.
// For channels with parameters, they should be subscribed independently.
func (c *{{ .Prefix }}Controller) SubscribeAll(as {{ .Prefix }}Subscriber) error {
    if as == nil {
        return ErrNil{{ .Prefix }}Subscriber
    }

    {{range  $key, $value := .SubscribeChannels -}}
    {{- if not .Parameters }}
    if err := c.Subscribe{{namify $key}}(as.{{namify $key}}); err != nil {
        return err
    }
    {{- end}}
    {{- end}}

    return nil
}

// UnsubscribeAll will unsubscribe all remaining subscribed channels
func (c *{{ .Prefix }}Controller) UnsubscribeAll() {
    // Unsubscribe channels with no parameters (if any)
    {{- range  $key, $value := .SubscribeChannels}}
    {{- if not .Parameters}}
    c.Unsubscribe{{namify $key}}()
    {{- end}}
    {{- end}}

    // Unsubscribe remaining channels
    for n, stopChan := range c.stopSubscribers {
        stopChan <- true
        delete(c.stopSubscribers, n)
    }
}
{{- end}}

{{range  $key, $value := .SubscribeChannels -}}
// Subscribe{{namify $key}} will subscribe to new messages from '{{$key}}' channel
{{- if .Parameters}}
func (c *{{ $.Prefix }}Controller) Subscribe{{namify $key}}(params {{namify $key}}Parameters, fn func (msg {{channelToMessageTypeName $value}})) error {
{{- else}}
func (c *{{ $.Prefix }}Controller) Subscribe{{namify $key}}(fn func (msg {{channelToMessageTypeName $value}})) error {
{{- end }}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Check if there is already a subscription
    _, exists := c.stopSubscribers[path]
    if exists {
        return fmt.Errorf("%w: {{$key}} channel is already subscribed", ErrAlreadySubscribedChannel)
    }

    // Subscribe to broker channel
    msgs, stop, err := c.brokerController.Subscribe(path)
    if err != nil {
        return err
    }

    // Asynchronously listen to new messages and pass them to app subscriber
    go func() {
        for um, open := <-msgs; open; um, open = <-msgs{
            msg, err := new{{channelToMessageTypeName $value}}FromUniversalMessage(um)
            if err != nil {
                c.handleError(path, err)
            } else {
                fn(msg)
            }
        }
    } ()

    // Add the stop channel to the inside map
    c.stopSubscribers[path] = stop

    return nil
}

// Unsubscribe{{namify $key}} will unsubscribe messages from '{{$key}}' channel
{{- if .Parameters}}
func (c *{{ $.Prefix }}Controller) Unsubscribe{{namify $key}}(params {{namify $key}}Parameters) {
{{- else}}
func (c *{{ $.Prefix }}Controller) Unsubscribe{{namify $key}}() {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Get stop channel
    stopChan, exists := c.stopSubscribers[path]
    if !exists {
        return
    }

    // Stop the channel and remove the entry
    stopChan <- true
    delete(c.stopSubscribers, path)
}
{{- end}}

{{- range  $key, $value := .PublishChannels}}
// Publish{{namify $key}} will publish messages to '{{$key}}' channel
{{- if .Parameters }}
func (c *{{ $.Prefix }}Controller) Publish{{namify $key}}(params {{namify $key}}Parameters, msg {{channelToMessageTypeName $value}}) error {
{{- else }}
func (c *{{ $.Prefix }}Controller) Publish{{namify $key}}(msg {{channelToMessageTypeName $value}}) error {
{{- end }}
    // Convert to UniversalMessage
    um, err := msg.toUniversalMessage()
    if err != nil  {
        return err
    }

    // Publish on event broker
    path := {{ generateChannelPath $value }}
    return c.brokerController.Publish(path, um)
}
{{end}}

func (c *{{ $.Prefix }}Controller) handleError(channelName string, err error) {
    // Wrap error with the channel name
    errWrapped := Error{
        Channel: channelName,
        Err: err,
    }

    // Send it to the error channel
    select{
    case c.errChan <- errWrapped:
    default:
        // Drop error if it's full or closed
    }
}

{{if eq .Prefix "Client" -}}
{{- range  $key, $value := .SubscribeChannels -}}
{{- if ne $value.Subscribe.Message.CorrelationIDLocation ""}}
// WaitFor{{namify $key}} will wait for a specific message by its correlation ID
//
// The pub function is the publication function that should be used to send the message
// It will be called after subscribing to the channel to avoid race condition, and potentially loose the message
{{- if .Parameters}}
func (cc *ClientController) WaitFor{{namify $key}}(ctx context.Context, params {{namify $key}}Parameters, msg MessageWithCorrelationID, pub func() error) ({{channelToMessageTypeName $value}}, error) {
{{- else}}
func (cc *ClientController) WaitFor{{namify $key}}(ctx context.Context, msg MessageWithCorrelationID, pub func() error) ({{channelToMessageTypeName $value}}, error) {
{{- end}}
    // Get channel path
    path := {{ generateChannelPath $value }}

    // Subscribe to broker channel
    msgs, stop, err := cc.brokerController.Subscribe(path)
    if err != nil {
        return {{channelToMessageTypeName $value}}{}, err
    }

    // Close subscriber on leave
    defer func(){ stop <- true } ()

    // Execute publication 
    if err := pub(); err != nil {
        return {{channelToMessageTypeName $value}}{}, err
    }

    // Wait for corresponding response
    for {
        select {
        case um := <-msgs:
            msg, err := new{{channelToMessageTypeName $value}}FromUniversalMessage(um)
            if err != nil {
                cc.handleError(path, err)
                continue
            }

            if {{if not $value.Subscribe.Message.CorrelationIDRequired}}msg.{{referenceToStructAttributePath $value.Subscribe.Message.CorrelationIDLocation}} != nil && {{end -}}
                msg.CorrelationID() == {{if not $value.Subscribe.Message.CorrelationIDRequired}}*{{end}}msg.{{referenceToStructAttributePath $value.Subscribe.Message.CorrelationIDLocation}} {
                return msg, nil
            }
        case <-ctx.Done(): // TODO: make it consumable between two call
            return {{channelToMessageTypeName $value}}{}, ErrContextCancelled
        }
    }
}
{{- end -}}
{{- end -}}
{{- end}}
