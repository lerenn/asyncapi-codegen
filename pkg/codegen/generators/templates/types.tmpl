var (
    // Generic error for AsyncAPI generated code
    ErrAsyncAPI = errors.New("error when using AsyncAPI")

    // ErrTimedOut is given when any timeout happen
    ErrTimedOut = fmt.Errorf("%w: time out", ErrAsyncAPI)

    // ErrNilBrokerController is raised when a nil broker controller is user
    ErrNilBrokerController = fmt.Errorf("%w: nil broker controller has been used", ErrAsyncAPI)

    // ErrNilAppSubscriber is raised when a nil app subscriber is user
    ErrNilAppSubscriber = fmt.Errorf("%w: nil app subscriber has been used", ErrAsyncAPI)

    // ErrNilClientSubscriber is raised when a nil client subscriber is user
    ErrNilClientSubscriber = fmt.Errorf("%w: nil client subscriber has been used", ErrAsyncAPI)

    // ErrAlreadySubscribedChannel is raised when a subscription is done twice
    // or more without unsubscribing
    ErrAlreadySubscribedChannel = fmt.Errorf("%w: the channel has already been subscribed", ErrAsyncAPI)
)

type Error struct {
    Channel string
    Err     error
}

func (e *Error) Error() string {
    return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

{{range $key, $value := .Channels -}}
{{- if and $value.Subscribe $value.Subscribe.Message.Payload}}
{{template "message" $value.Subscribe.Message}}
{{end -}}

{{- if and $value.Publish $value.Publish.Message.Payload}}
{{template "message" $value.Publish.Message}}
{{end -}}
{{- end}}

{{range $key, $value := .Components.Messages}}
{{template "message" $value}}
{{end}}

{{range $key, $value := .Components.Schemas}}
// {{namify $key}}Schema is a schema from the AsyncAPI specification required in messages
{{if $value.Description -}}
// Description: {{$value.Description}}
{{end -}}
type {{namify $key}}Schema {{template "any" $value}}
{{end}}
