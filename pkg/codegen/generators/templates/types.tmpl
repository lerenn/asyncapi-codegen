var (
    // Generic error for AsyncAPI generated code
    ErrAsyncAPI = errors.New("error when using AsyncAPI")

    // ErrTimedOut is given when any timeout happen
    ErrTimedOut = fmt.Errorf("%w: time out", ErrAsyncAPI)
    
    // ErrNilAppController is raised when a nil app controller is user
    ErrNilAppController = fmt.Errorf("%w: nil app controller has been used", ErrAsyncAPI)

    // ErrNilBrokerController is raised when a nil broker controller is user
    ErrNilBrokerController = fmt.Errorf("%w: nil broker controller has been used", ErrAsyncAPI)

    // ErrNilClientController is raised when a nil client controller is user
    ErrNilClientController = fmt.Errorf("%w: nil client controller has been used", ErrAsyncAPI)

    // ErrAlreadySubscribedChannel is raised when a subscription is done twice
    // or more without unsubscribing
    ErrAlreadySubscribedChannel = fmt.Errorf("%w: the channel has already been subscribed", ErrAsyncAPI)
)

{{range $key, $value := .Channels -}}
{{- if and $value.Subscribe $value.Subscribe.Message.Payload}}
{{template "message" $value.Subscribe.Message}}
{{end -}}

{{- if and $value.Publish $value.Publish.Message.Payload}}
{{template "message" $value.Publish.Message}}
{{end -}}
{{- end}}

{{range $key, $value := .Components.Messages}}
{{template "message" $value}}
{{end}}

{{range $key, $value := .Components.Schemas}}
// {{namify $key}} is a component of the AsyncAPI specification required in messages
{{if $value.Description -}}
// {{$value.Description}}
{{end -}}
type {{namify $key}} {{template "any" $value}}
{{end}}
