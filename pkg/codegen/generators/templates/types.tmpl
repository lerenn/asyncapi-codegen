var (
    // Generic error for AsyncAPI generated code
    ErrAsyncAPI = errors.New("error when using AsyncAPI")

    // ErrContextCanceled is given when a given context is canceled
    ErrContextCanceled = fmt.Errorf("%w: context canceled", ErrAsyncAPI)

    // ErrNilBrokerController is raised when a nil broker controller is user
    ErrNilBrokerController = fmt.Errorf("%w: nil broker controller has been used", ErrAsyncAPI)

    // ErrNilAppSubscriber is raised when a nil app subscriber is user
    ErrNilAppSubscriber = fmt.Errorf("%w: nil app subscriber has been used", ErrAsyncAPI)

    // ErrNilUserSubscriber is raised when a nil user subscriber is user
    ErrNilUserSubscriber = fmt.Errorf("%w: nil user subscriber has been used", ErrAsyncAPI)

    // ErrAlreadySubscribedChannel is raised when a subscription is done twice
    // or more without unsubscribing
    ErrAlreadySubscribedChannel = fmt.Errorf("%w: the channel has already been subscribed", ErrAsyncAPI)

    // ErrSubscriptionCanceled is raised when expecting something and the subscription has been canceled before it happens
    ErrSubscriptionCanceled = fmt.Errorf("%w: the subscription has been canceled", ErrAsyncAPI)
)

// controller is the controller that will be used to communicate with the broker
// It will be used internally by AppController and UserController
type controller struct {
    // broker is the broker controller that will be used to communicate
    broker extensions.BrokerController
    // stopSubscribers is a map of stop channels for each subscribed channel
    stopSubscribers  map[string]chan interface{}
    // logger is the logger that will be used to log operations on controller
    logger           extensions.Logger
    // middlewares are the middlewares that will be executed when sending or
    // receiving messages
    middlewares      []extensions.Middleware
}

// ControllerOption is the type of the options that can be passed
// when creating a new Controller
type ControllerOption func(controller *controller)

// WithLogger attaches a logger to the controller
func WithLogger(logger extensions.Logger) ControllerOption {
    return func(controller *controller) {
		controller.logger = logger
	}
}

// WithMiddlewares attaches middlewares that will be executed when sending or receiving messages
func WithMiddlewares(middlewares ...extensions.Middleware) ControllerOption {
    return func(controller *controller) {
		controller.middlewares = middlewares
	}
}

type MessageWithCorrelationID interface {
    CorrelationID() string
    SetCorrelationID(id string)
}

type Error struct {
    Channel string
    Err     error
}

func (e *Error) Error() string {
    return fmt.Sprintf("channel %q: err %v", e.Channel, e.Err)
}

{{range $key, $value := .Channels -}}

{{- if $value.Parameters -}}
// {{ namify .Name }}Parameters represents {{ namify .Name }} channel parameters
type {{ namify .Name }}Parameters struct {
{{- range $key, $value := .Parameters}}
    {{- template "parameter" $value}}
{{- end}}
}
{{end}}

{{- if and $value.Subscribe $value.Subscribe.Message.Payload}}
{{template "message" $value.Subscribe.Message}}
{{end -}}

{{- if and $value.Publish $value.Publish.Message.Payload}}
{{template "message" $value.Publish.Message}}
{{end -}}
{{- end}}

{{range $key, $value := .Components.Messages}}
{{template "message" $value}}
{{end}}

{{range $key, $value := .Components.Schemas}}
// {{namify $key}}Schema is a schema from the AsyncAPI specification required in messages
{{if $value.Description -}}
// Description: {{multiLineComment $value.Description}}
{{end -}}
type {{namify $key}}Schema {{template "any" $value}}

{{/* Create specific marshaling for time */ -}}
{{- if or (eq $value.Format "date") (eq $value.Format "date-time") -}}
// MarshalJSON will override the marshal as this is not a normal 'time.Time' type
func (t {{namify $key}}Schema) MarshalJSON() ([]byte, error) {
    return json.Marshal(time.Time(t))
}

// UnmarshalJSON will override the unmarshal as this is not a normal 'time.Time' type
func (t *{{namify $key}}Schema) UnmarshalJSON(data []byte) error {
    var timeFormat time.Time
    if err := json.Unmarshal(data, &timeFormat);  err != nil {
        return err
    }

    *t = {{namify $key}}Schema(timeFormat)
    return nil
}
{{- end -}} 
{{end}}
